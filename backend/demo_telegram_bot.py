#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Telegram –±–æ—Ç–∞
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.conf import settings
from apps.cards.models import Card, Series
from telegram_bot.models import VerifiedCard, VerificationLog
from telegram_bot.utils import create_card_qr_code, generate_qr_code, get_qr_codes_directory


def print_header(text):
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print("\n" + "="*60)
    print(f"  {text}")
    print("="*60 + "\n")


def demo_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    print_header("üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º
    total_cards = Card.objects.count()
    total_series = Series.objects.count()
    print(f"üé¥ –í—Å–µ–≥–æ –∫–∞—Ä—Ç –≤ –±–∞–∑–µ: {total_cards}")
    print(f"üìö –í—Å–µ–≥–æ —Å–µ—Ä–∏–π: {total_series}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è–º
    total_verified = VerifiedCard.objects.count()
    active_verified = VerifiedCard.objects.filter(is_active=True).count()
    total_checks = sum(VerifiedCard.objects.values_list('verification_count', flat=True) or [0])
    
    print(f"\n‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç: {total_verified}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_verified}")
    print(f"   –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {total_verified - active_verified}")
    print(f"\nüîç –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_checks}")
    
    if total_verified > 0:
        avg_checks = total_checks / total_verified
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ –∫–∞—Ä—Ç—É: {avg_checks:.2f}")
    
    # –õ–æ–≥–∏
    total_logs = VerificationLog.objects.count()
    print(f"\nüìù –ó–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö: {total_logs}")


def demo_create_verification():
    """–î–µ–º–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print_header("‚ûï –°–û–ó–î–ê–ù–ò–ï –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò")
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç—É –±–µ–∑ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    verified_card_ids = VerifiedCard.objects.values_list('card_id', flat=True)
    unverified_cards = Card.objects.exclude(id__in=verified_card_ids)
    
    if not unverified_cards.exists():
        print("‚ö†Ô∏è  –í—Å–µ –∫–∞—Ä—Ç—ã —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã!")
        print("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ä—Ç—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        card = Card.objects.first()
        if not card:
            print("‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –∫–∞—Ä—Ç!")
            return None
    else:
        card = unverified_cards.first()
    
    # –°–æ–∑–¥–∞—ë–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    verified_card, created = VerifiedCard.objects.get_or_create(
        card=card,
        defaults={
            'notes': '–°–æ–∑–¥–∞–Ω–æ –¥–µ–º–æ-—Å–∫—Ä–∏–ø—Ç–æ–º',
            'owner_info': 'Demo Owner'
        }
    )
    
    if created:
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –∫–∞—Ä—Ç—ã:")
    else:
        print(f"‚ÑπÔ∏è  –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –∫–∞—Ä—Ç—ã:")
    
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {card.title}")
    print(f"   –ù–æ–º–µ—Ä: #{card.number}")
    print(f"   –°–µ—Ä–∏—è: {card.series.title}")
    print(f"   –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {verified_card.verification_code}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞
    bot_username = settings.TELEGRAM_BOT_USERNAME
    bot_link = verified_card.get_bot_link(bot_username)
    print(f"\nüîó –°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞:")
    print(f"   {bot_link}")
    
    return verified_card


def demo_generate_qr(verified_card):
    """–î–µ–º–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞"""
    if not verified_card:
        print("‚ö†Ô∏è  –ù–µ—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞")
        return
    
    print_header("üì± –ì–ï–ù–ï–†–ê–¶–ò–Ø QR-–ö–û–î–ê")
    
    bot_username = settings.TELEGRAM_BOT_USERNAME
    qr_dir = get_qr_codes_directory()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
    card = verified_card.card
    qr_filename = f'demo_card_{card.series.number}_{card.number}.png'
    qr_path = os.path.join(qr_dir, qr_filename)
    
    try:
        create_card_qr_code(verified_card, bot_username, save_path=qr_path)
        print(f"‚úÖ QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        print(f"   –§–∞–π–ª: {qr_path}")
        print(f"   –†–∞–∑–º–µ—Ä: {os.path.getsize(qr_path)} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if os.path.exists(qr_path):
            print(f"\nüíæ QR-–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            print(f"   –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª: open {qr_path}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ QR-–∫–æ–¥–∞: {e}")


def demo_top_cards():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞—Ä—Ç"""
    print_header("üèÜ –¢–û–ü-5 –ü–û–ü–£–õ–Ø–†–ù–´–• –ö–ê–†–¢")
    
    top_cards = VerifiedCard.objects.select_related('card', 'card__series').order_by(
        '-verification_count'
    )[:5]
    
    if not top_cards.exists():
        print("‚ö†Ô∏è  –ù–µ—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç")
        return
    
    for i, vc in enumerate(top_cards, 1):
        print(f"{i}. {vc.card.title} #{vc.card.number}")
        print(f"   –ü—Ä–æ–≤–µ—Ä–æ–∫: {vc.verification_count}")
        print(f"   –°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if vc.is_active else '‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞'}")
        print()


def demo_bot_commands():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
    print_header("ü§ñ –ö–û–ú–ê–ù–î–´ TELEGRAM –ë–û–¢–ê")
    
    print("–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
    print("  /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º / –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ä—Ç—É")
    print("  /help  - –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print("  /info  - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∏")
    
    print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("  python manage.py run_telegram_bot")
    print("  –∏–ª–∏")
    print("  ./run_telegram_bot.sh")


def demo_api_endpoints():
    """–ü–æ–∫–∞–∑–∞—Ç—å API endpoints"""
    print_header("üåê API ENDPOINTS")
    
    base_url = "http://localhost:8000"
    
    print("–ü—É–±–ª–∏—á–Ω—ã–µ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏):")
    print(f"  GET {base_url}/api/telegram-bot/verified-cards/verify/?code=XXX")
    print()
    
    print("–ü—Ä–∏–≤–∞—Ç–Ω—ã–µ (—Ç—Ä–µ–±—É—é—Ç JWT —Ç–æ–∫–µ–Ω):")
    print(f"  GET  {base_url}/api/telegram-bot/verified-cards/")
    print(f"  POST {base_url}/api/telegram-bot/verified-cards/")
    print(f"  GET  {base_url}/api/telegram-bot/verified-cards/{{id}}/")
    print(f"  GET  {base_url}/api/telegram-bot/verified-cards/{{id}}/qr_code/")
    print(f"  GET  {base_url}/api/telegram-bot/verified-cards/statistics/")
    print()
    
    print("–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ curl –∏–ª–∏ Postman")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("\n")
    print("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë                                                       ‚ïë")
    print("‚ïë     üé¥  TELEGRAM BOT - –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´  ü§ñ      ‚ïë")
    print("‚ïë                                                       ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    
    try:
        # 1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        demo_info()
        
        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        verified_card = demo_create_verification()
        
        # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
        demo_generate_qr(verified_card)
        
        # 4. –¢–æ–ø –∫–∞—Ä—Ç
        demo_top_cards()
        
        # 5. –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        demo_bot_commands()
        
        # 6. API endpoints
        demo_api_endpoints()
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        print_header("‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print()
        print("–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: ./run_telegram_bot.sh")
        print("  2. –°–æ–∑–¥–∞–π—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: python manage.py create_verified_cards --generate-qr")
        print("  3. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω–∫—É: http://localhost:8000/admin/")
        print("  4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ QR-–∫–æ–¥—ã –≤: backend/media/qr_codes/")
        print()
        print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
        print("  - QUICK_START_TELEGRAM_BOT.md - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
        print("  - TELEGRAM_BOT_README.md - –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
        print("  - TELEGRAM_BOT_CHEATSHEET.md - –®–ø–∞—Ä–≥–∞–ª–∫–∞")
        print()
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == '__main__':
    sys.exit(main())

