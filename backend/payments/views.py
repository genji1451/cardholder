import hashlib
import hmac
import logging
import asyncio
from django.shortcuts import render, redirect
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from django.conf import settings
from django.utils import timezone
from django.utils.decorators import method_decorator
from rest_framework import status
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny
from rest_framework.response import Response
from .models import Order, Payment
from .serializers import CreateOrderSerializer, PaymentSerializer
import json

logger = logging.getLogger(__name__)


async def send_order_notification(order, items_data, telegram_username=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤ Telegram"""
    try:
        from telegram import Bot
        
        bot_token = settings.TELEGRAM_BOT_TOKEN
        channel_id = settings.TELEGRAM_CHANNEL_ID
        
        logger.info(f"Starting order notification. Bot token: {bot_token[:10] if bot_token else 'None'}..., Channel ID: {channel_id}")
        
        if not bot_token:
            logger.warning("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return
        
        if not channel_id:
            logger.warning("TELEGRAM_CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return
        
        bot = Bot(token=bot_token)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
        items_text = "\n".join([
            f"  ‚Ä¢ {item.get('product_title', '–¢–æ–≤–∞—Ä')} x{item.get('quantity', 1)} - {item.get('price', 0) * item.get('quantity', 1)}‚ÇΩ"
            for item in items_data
        ])
        
        message = f"""üõçÔ∏è <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}</b>

üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b>
  Email: {order.email}
  –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone if order.phone else '–ù–µ —É–∫–∞–∑–∞–Ω'}
  {"  Telegram: @" + telegram_username if telegram_username else ""}

üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>
{items_text}

üí∞ <b>–°—É–º–º–∞:</b>
  –¢–æ–≤–∞—Ä—ã: {order.total_amount - order.delivery_cost}‚ÇΩ
  –î–æ—Å—Ç–∞–≤–∫–∞: {"–ë–µ—Å–ø–ª–∞—Ç–Ω–æ" if order.delivery_cost == 0 else str(order.delivery_cost) + "‚ÇΩ"}
  <b>–ò—Ç–æ–≥–æ: {order.total_amount}‚ÇΩ</b>

üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b>
  –°–ø–æ—Å–æ–±: {order.delivery_method if order.delivery_method else '–ù–µ —É–∫–∞–∑–∞–Ω'}
  –ê–¥—Ä–µ—Å: {order.delivery_address if order.delivery_address else '–ù–µ —É–∫–∞–∑–∞–Ω'}
"""
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º chat_id: —É–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö ID
        chat_id = channel_id.lstrip('@')
        logger.info(f"Attempting to send message to chat_id: {chat_id}")
        
        try:
            await bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode='HTML'
            )
            logger.info(f"‚úÖ Order notification sent to Telegram channel: {channel_id}")
        except Exception as e:
            logger.error(f"‚ùå Failed to send order notification to Telegram: {str(e)}")
            logger.error(f"Error details: chat_id={chat_id}, channel_id={channel_id}")
            
    except ImportError as e:
        logger.error(f"Failed to import telegram library: {str(e)}")
    except Exception as e:
        logger.error(f"Error sending order notification: {str(e)}", exc_info=True)


def send_order_notification_sync(order, items_data, telegram_username=None):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        asyncio.run(send_order_notification(order, items_data, telegram_username))
    except Exception as e:
        logger.error(f"Error in send_order_notification_sync: {str(e)}")


@api_view(['POST', 'OPTIONS'])
@permission_classes([AllowAny])
def create_order(request):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–ø–ª–∞—Ç–µ"""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è CORS preflight
    if request.method == 'OPTIONS':
        response = Response(status=status.HTTP_200_OK)
        response['Access-Control-Allow-Origin'] = '*'
        response['Access-Control-Allow-Methods'] = 'POST, OPTIONS'
        response['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
        return response
    
    try:
        logger.info(f"Creating order with data: {request.data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Robokassa
        if not settings.ROBOKASSA_LOGIN or not settings.ROBOKASSA_PASSWORD1:
            logger.error("Robokassa settings not configured")
            return Response({
                'error': 'Payment system not configured'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
        serializer = CreateOrderSerializer(data=request.data)
        
        if serializer.is_valid():
            logger.info("Serializer is valid, creating order")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
            items_data = request.data.get('items', [])
            telegram_username = request.data.get('telegram_username', '')
            
            order = serializer.save()
            logger.info(f"Order created: {order.id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤ Telegram (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
            try:
                send_order_notification_sync(order, items_data, telegram_username)
            except Exception as e:
                logger.error(f"Failed to send order notification: {str(e)}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –¥–ª—è Robokassa (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º—É–º .00)
            amount = float(order.total_amount)
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å—É–º–º–∞ –º–∏–Ω–∏–º—É–º 1 —Ä—É–±–ª—å (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è Robokassa)
            if amount < 1:
                amount = 1
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º .00 –¥–ª—è —Å—É–º–º –º–µ–Ω—å—à–µ 100 —Ä—É–±–ª–µ–π
            if amount < 100 and amount >= 1:
                amount_str = f"{amount:.2f}"
            else:
                amount_str = f"{amount:.2f}".rstrip('0').rstrip('.')
            if not amount_str:
                amount_str = "1.00"
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment = Payment.objects.create(
                order=order,
                robokassa_invoice_id=str(order.id),  # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º order.id
                amount=order.total_amount
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º payment.id –∫–∞–∫ InvId (—á–∏—Å–ª–æ–≤–æ–π ID –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Robokassa)
            inv_id = str(payment.id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º robokassa_invoice_id
            payment.robokassa_invoice_id = inv_id
            payment.save()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è Robokassa
            signature_string = f"{settings.ROBOKASSA_LOGIN}:{amount_str}:{inv_id}:{settings.ROBOKASSA_PASSWORD1}"
            signature = hashlib.md5(signature_string.encode()).hexdigest()
            
            logger.info(f"Robokassa signature: {signature_string} -> {signature}")
            
            robokassa_url = "https://auth.robokassa.ru/Merchant/Index.aspx"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏, –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∏ –∞–¥—Ä–µ—Å–æ–º
            # Robokassa –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç Description –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤, –¥–µ–ª–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞, —Ç–∞–∫ –∫–∞–∫ —Ç–æ–≤–∞—Ä—ã —É–∂–µ —Å–æ–∑–¥–∞–Ω—ã –≤ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–µ
            try:
                items_list = []
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î (–æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã)
                order_items = order.items.all()
                if order_items.exists():
                    for item in order_items:
                        items_list.append(f"{item.product_title} x{item.quantity}")
                else:
                    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
                    for item_data in items_data:
                        title = item_data.get('product_title', '–¢–æ–≤–∞—Ä')
                        quantity = item_data.get('quantity', 1)
                        items_list.append(f"{title} x{quantity}")
                
                # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
                description_parts = []
                
                # –¢–æ–≤–∞—Ä—ã (–ø–µ—Ä–≤—ã–µ 30 —Å–∏–º–≤–æ–ª–æ–≤)
                if items_list:
                    items_str = ", ".join(items_list)[:30]
                    if items_str:
                        description_parts.append(f"–¢–æ–≤–∞—Ä—ã: {items_str}")
                
                # Email (–ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤)
                if order.email:
                    email_str = order.email[:20]
                    description_parts.append(f"Email: {email_str}")
                
                # –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤)
                if order.delivery_address:
                    address_str = order.delivery_address[:20]
                    description_parts.append(f"–ê–¥—Ä–µ—Å: {address_str}")
                
                # –ù–∏–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
                telegram_username = getattr(order, 'telegram_username', None)
                if telegram_username:
                    telegram_str = telegram_username[:15]
                    description_parts.append(f"TG: {telegram_str}")
                
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∑–∞–∫–∞–∑–∞
                if not description_parts:
                    description = f"–ó–∞–∫–∞–∑ {str(order.id)[:50]}"
                else:
                    description = " | ".join(description_parts)
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤ (–ª–∏–º–∏—Ç Robokassa)
                    if len(description) > 100:
                        description = description[:97] + "..."
                        
            except Exception as e:
                logger.error(f"Error creating description: {str(e)}")
                # Fallback: –ø—Ä–æ—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                description = f"–ó–∞–∫–∞–∑ {str(order.id)[:50]}"
            
            payment_data = {
                'MerchantLogin': settings.ROBOKASSA_LOGIN,
                'OutSum': amount_str,
                'InvId': inv_id,
                'Description': description,
                'SignatureValue': signature,
                'Culture': 'ru',
                'Encoding': 'utf-8',
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º IsTest —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω
            if settings.ROBOKASSA_TEST_MODE:
                payment_data['IsTest'] = '1'
            
            # –î–æ–±–∞–≤–ª—è–µ–º URL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
            if hasattr(settings, 'ROBOKASSA_SUCCESS_URL') and settings.ROBOKASSA_SUCCESS_URL:
                payment_data['SuccessURL'] = settings.ROBOKASSA_SUCCESS_URL
            if hasattr(settings, 'ROBOKASSA_FAIL_URL') and settings.ROBOKASSA_FAIL_URL:
                payment_data['FailURL'] = settings.ROBOKASSA_FAIL_URL
            
            logger.info(f"Payment created: {payment.id}, amount: {payment.amount}")
            
            response = Response({
                'order_id': str(order.id),
                'payment_id': payment.id,
                'amount': payment.amount,
                'robokassa_url': robokassa_url,
                'payment_data': payment_data,
                'signature': signature
            }, status=status.HTTP_201_CREATED)
            
            # –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –æ—Ç–≤–µ—Ç
            response['Access-Control-Allow-Origin'] = '*'
            response['Access-Control-Allow-Methods'] = 'POST, OPTIONS'
            response['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
            
            return response
        
        logger.error(f"Serializer validation failed: {serializer.errors}")
        response = Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
        response['Access-Control-Allow-Origin'] = '*'
        return response
        
    except Exception as e:
        logger.error(f"Unexpected error in create_order: {str(e)}", exc_info=True)
        response = Response({
            'error': 'Internal server error',
            'details': str(e) if settings.DEBUG else 'Contact support'
        }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        response['Access-Control-Allow-Origin'] = '*'
        return response


@csrf_exempt
@require_POST
def robokassa_result(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Robokassa –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Robokassa
        out_sum = request.POST.get('OutSum')
        inv_id = request.POST.get('InvId')
        signature = request.POST.get('SignatureValue')
        
        logger.info(f"Robokassa result: OutSum={out_sum}, InvId={inv_id}, Signature={signature}")
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –ø–æ robokassa_invoice_id (InvId —Ç–µ–ø–µ—Ä—å = payment.id)
        try:
            payment = Payment.objects.get(robokassa_invoice_id=inv_id)
            order = payment.order
        except Payment.DoesNotExist:
            logger.error(f"Payment not found for InvId: {inv_id}")
            return HttpResponse("ERROR")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —á–∏—Å–ª–∞, —É—á–∏—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)
        expected_amount = float(payment.amount)
        received_amount = float(out_sum)
        if abs(expected_amount - received_amount) > 0.01:  # –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
            logger.error(f"Amount mismatch: expected {expected_amount}, got {received_amount}")
            return HttpResponse("ERROR")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        signature_string = f"{out_sum}:{inv_id}:{settings.ROBOKASSA_PASSWORD2}"
        expected_signature = hashlib.md5(signature_string.encode()).hexdigest()
        
        if not hmac.compare_digest(signature.lower(), expected_signature.lower()):
            logger.error(f"Signature mismatch: expected {expected_signature}, got {signature}")
            return HttpResponse("ERROR")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        payment.status = 'success'
        payment.paid_at = timezone.now()
        payment.robokassa_response = dict(request.POST)
        payment.save()
        
        order.status = 'paid'
        order.save()
        
        logger.info(f"Payment successful for order {inv_id}")
        return HttpResponse("OK")
        
    except Exception as e:
        logger.error(f"Error processing Robokassa result: {str(e)}")
        return HttpResponse("ERROR")


@api_view(['GET'])
@permission_classes([AllowAny])
def payment_status(request, order_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        order = Order.objects.get(id=order_id)
        payment = Payment.objects.get(order=order)
        
        return Response({
            'order_id': str(order.id),
            'status': payment.status,
            'amount': payment.amount,
            'paid_at': payment.paid_at
        })
    except (Order.DoesNotExist, Payment.DoesNotExist):
        return Response({'error': 'Order not found'}, status=status.HTTP_404_NOT_FOUND)


@csrf_exempt
def payment_success(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥"""
    # –ü–æ–ª—É—á–∞–µ–º InvId –∏–∑ GET –∏–ª–∏ POST (Robokassa –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å POST)
    order_id = request.GET.get('InvId') or request.POST.get('InvId')
    
    # –ï—Å–ª–∏ InvId –µ—Å—Ç—å, –∏—â–µ–º payment –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    if order_id:
        try:
            payment = Payment.objects.get(robokassa_invoice_id=order_id)
            if payment.status == 'pending':
                payment.status = 'success'
                payment.paid_at = timezone.now()
                payment.save()
                
                order = payment.order
                if order.status == 'pending':
                    order.status = 'paid'
                    order.save()
                
                logger.info(f"Payment marked as success: {order_id}")
        except Payment.DoesNotExist:
            logger.warning(f"Payment not found for InvId: {order_id}")
    
    # –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º InvId
    frontend_url = 'https://portfolio.cards/payment/success/'
    if order_id:
        frontend_url += f'?InvId={order_id}'
    
    return redirect(frontend_url)


@csrf_exempt
def payment_fail(request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥"""
    # –ü–æ–ª—É—á–∞–µ–º InvId –∏–∑ GET –∏–ª–∏ POST
    order_id = request.GET.get('InvId') or request.POST.get('InvId')
    
    # –ï—Å–ª–∏ InvId –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    if order_id:
        try:
            payment = Payment.objects.get(robokassa_invoice_id=order_id)
            if payment.status == 'pending':
                payment.status = 'failed'
                payment.save()
                logger.info(f"Payment marked as failed: {order_id}")
        except Payment.DoesNotExist:
            logger.warning(f"Payment not found for InvId: {order_id}")
    
    # –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º InvId
    frontend_url = 'https://portfolio.cards/payment/fail/'
    if order_id:
        frontend_url += f'?InvId={order_id}'
    
    return redirect(frontend_url)