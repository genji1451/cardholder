"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏
"""

from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.conf import settings
from django.utils import timezone
from telegram_bot.models import VerifiedCard, VerificationLog, BotUser, Notification


@admin.register(VerifiedCard)
class VerifiedCardAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç"""
    
    list_display = [
        'id',
        'card_name_display',
        'photo_preview',
        'verification_code_short',
        'is_active',
        'verification_count',
        'created_at',
        'qr_code_link',
    ]
    
    list_filter = [
        'is_active',
        'created_at',
        'updated_at'
    ]
    
    search_fields = [
        'card_name',
        'verification_code',
        'description',
        'owner_info',
        'notes'
    ]
    
    readonly_fields = [
        'verification_code',
        'created_at',
        'updated_at',
        'qr_code_preview',
        'bot_link_display',
        'verification_count',
        'photo_original_preview',
        'photo_packaged_preview'
    ]
    
    fieldsets = (
        ('üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': (
                'card_name',
                'description',
                'card',
                'is_active',
            ),
            'description': '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã'
        }),
        ('üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏', {
            'fields': (
                'photo_original',
                'photo_original_preview',
                'photo_packaged',
                'photo_packaged_preview',
            ),
            'description': '–§–æ—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã –∏ –≤ —É–ø–∞–∫–æ–≤–∫–µ'
        }),
        ('üîë –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è', {
            'fields': (
                'verification_code',
                'verification_count',
            ),
            'description': '–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫'
        }),
        ('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': (
                'created_at',
                'updated_at',
            ),
            'classes': ('collapse',)
        }),
        ('üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', {
            'fields': (
                'owner_info',
                'notes',
            ),
            'classes': ('collapse',)
        }),
        ('üîó QR-–∫–æ–¥ –∏ —Å—Å—ã–ª–∫–∏', {
            'fields': (
                'qr_code_preview',
                'bot_link_display',
            ),
            'description': 'QR-–∫–æ–¥ –¥–ª—è –ø–µ—á–∞—Ç–∏ –∏ —Å—Å—ã–ª–∫–∞ –¥–ª—è Telegram'
        }),
    )
    
    actions = ['activate_cards', 'deactivate_cards']
    
    def card_name_display(self, obj):
        """–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã"""
        if obj.card:
            return f"{obj.card.title}"
        return obj.card_name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    card_name_display.short_description = '–ù–∞–∑–≤–∞–Ω–∏–µ'
    card_name_display.admin_order_field = 'card_name'
    
    def photo_preview(self, obj):
        """–ú–∏–Ω–∏–∞—Ç—é—Ä–∞ —Ñ–æ—Ç–æ –≤ —Å–ø–∏—Å–∫–µ"""
        if obj.photo_original:
            return format_html(
                '<img src="{}" style="width: 50px; height: 50px; object-fit: cover; border-radius: 4px;" />',
                obj.photo_original.url
            )
        return "‚Äî"
    photo_preview.short_description = 'üì∏'
    
    def verification_code_short(self, obj):
        """–°–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        return f"{obj.verification_code[:8]}..."
    verification_code_short.short_description = '–ö–æ–¥'
    
    def qr_code_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞"""
        return format_html(
            '<a href="/api/telegram-bot/qr-code/{}/download/" target="_blank" '
            'style="background: #0088cc; color: white; padding: 8px 15px; '
            'border-radius: 4px; text-decoration: none; display: inline-block;">üì• –°–∫–∞—á–∞—Ç—å QR</a>',
            obj.id
        )
    qr_code_link.short_description = 'QR'
    
    def bot_link_display(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞"""
        bot_username = getattr(settings, 'TELEGRAM_BOT_USERNAME', 'cardloginbot')
        link = obj.get_bot_link(bot_username)
        return format_html(
            '<div style="margin-bottom: 10px;">'
            '<a href="{}" target="_blank" style="background: #0088cc; color: white; '
            'padding: 10px 20px; border-radius: 4px; text-decoration: none; display: inline-block;">'
            'üîó –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram</a>'
            '</div>'
            '<input type="text" value="{}" readonly '
            'style="width: 100%; padding: 8px; border: 1px solid #ddd; '
            'border-radius: 4px; font-family: monospace;" '
            'onclick="this.select(); document.execCommand(\'copy\'); '
            'alert(\'–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!\');">',
            link, link
        )
    bot_link_display.short_description = '–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏'
    
    def qr_code_preview(self, obj):
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä QR-–∫–æ–¥–∞"""
        if obj.id:
            return format_html(
                '<div style="text-align: center;">'
                '<img src="/api/telegram-bot/qr-code/{}/" '
                'style="max-width: 300px; border: 1px solid #ddd; border-radius: 8px; padding: 10px;" />'
                '<p style="margin-top: 10px;">–≠—Ç–æ—Ç QR-–∫–æ–¥ –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –∏ –Ω–∞–∫–ª–µ–∏—Ç—å –Ω–∞ –∫–µ–π—Å —Å –∫–∞—Ä—Ç–æ–π</p>'
                '</div>',
                obj.id
            )
        return "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞—Ä—Ç—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å QR-–∫–æ–¥"
    qr_code_preview.short_description = 'QR-–∫–æ–¥ –¥–ª—è –ø–µ—á–∞—Ç–∏'
    
    def photo_original_preview(self, obj):
        """–ü—Ä–µ–≤—å—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
        if obj.photo_original:
            return format_html(
                '<div style="text-align: center;">'
                '<img src="{}" style="max-width: 400px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);" />'
                '<p style="margin-top: 10px; color: #666;">–§–æ—Ç–æ –∫–∞—Ä—Ç—ã –¥–æ —É–ø–∞–∫–æ–≤–∫–∏</p>'
                '</div>',
                obj.photo_original.url
            )
        return "–§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"
    photo_original_preview.short_description = '–ü—Ä–µ–≤—å—é –æ—Ä–∏–≥–∏–Ω–∞–ª–∞'
    
    def photo_packaged_preview(self, obj):
        """–ü—Ä–µ–≤—å—é —É–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
        if obj.photo_packaged:
            return format_html(
                '<div style="text-align: center;">'
                '<img src="{}" style="max-width: 400px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);" />'
                '<p style="margin-top: 10px; color: #666;">–§–æ—Ç–æ –∫–∞—Ä—Ç—ã –≤ —É–ø–∞–∫–æ–≤–∫–µ —Å QR-–∫–æ–¥–æ–º</p>'
                '</div>',
                obj.photo_packaged.url
            )
        return "–§–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"
    photo_packaged_preview.short_description = '–ü—Ä–µ–≤—å—é —É–ø–∞–∫–æ–≤–∫–∏'
    
    def activate_cards(self, request, queryset):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã"""
        updated = queryset.update(is_active=True)
        self.message_user(request, f'‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∫–∞—Ä—Ç: {updated}', level='success')
    activate_cards.short_description = '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã'
    
    def deactivate_cards(self, request, queryset):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã"""
        updated = queryset.update(is_active=False)
        self.message_user(request, f'‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∫–∞—Ä—Ç: {updated}', level='warning')
    deactivate_cards.short_description = '‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã'


@admin.register(VerificationLog)
class VerificationLogAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    list_display = [
        'id',
        'card_info',
        'telegram_user_display',
        'checked_at',
        'ip_address'
    ]
    
    list_filter = [
        'checked_at',
        'verified_card__is_active'
    ]
    
    search_fields = [
        'telegram_user_id',
        'telegram_username',
        'verified_card__card_name',
        'ip_address'
    ]
    
    readonly_fields = [
        'verified_card',
        'verified_card_link',
        'telegram_user_id',
        'telegram_username',
        'checked_at',
        'ip_address',
        'user_agent'
    ]
    
    fieldsets = (
        ('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–µ—Ä–∫–µ', {
            'fields': (
                'verified_card',
                'verified_card_link',
                'checked_at',
            )
        }),
        ('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', {
            'fields': (
                'telegram_user_id',
                'telegram_username',
            )
        }),
        ('üåê –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ', {
            'fields': (
                'ip_address',
                'user_agent',
            ),
            'classes': ('collapse',)
        }),
    )
    
    date_hierarchy = 'checked_at'
    
    def card_info(self, obj):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä—Ç–µ"""
        if obj.verified_card.card:
            return f"{obj.verified_card.card.title}"
        return obj.verified_card.card_name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    card_info.short_description = '–ö–∞—Ä—Ç–∞'
    card_info.admin_order_field = 'verified_card__card_name'
    
    def verified_card_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É"""
        if obj.verified_card:
            url = reverse('admin:telegram_bot_verifiedcard_change', args=[obj.verified_card.id])
            card_name = obj.verified_card.card_name or "–ö–∞—Ä—Ç–∞"
            return format_html(
                '<a href="{}" style="background: #0088cc; color: white; padding: 8px 15px; '
                'border-radius: 4px; text-decoration: none; display: inline-block;">üîó –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É: {}</a>',
                url, card_name
            )
        return "‚Äî"
    verified_card_link.short_description = '–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç—É'
    
    def telegram_user_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
        if obj.telegram_username:
            return format_html(
                '<a href="https://t.me/{}" target="_blank">@{}</a> (ID: {})',
                obj.telegram_username, obj.telegram_username, obj.telegram_user_id
            )
        return f"ID: {obj.telegram_user_id}"
    telegram_user_display.short_description = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    
    def has_add_permission(self, request):
        """–ó–∞–ø—Ä–µ—â–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤—Ä—É—á–Ω—É—é"""
        return False
    
    def has_change_permission(self, request, obj=None):
        """–ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤"""
        return False


@admin.register(BotUser)
class BotUserAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"""
    
    list_display = [
        'id',
        'user_display',
        'telegram_id',
        'is_active',
        'is_blocked',
        'interaction_count',
        'last_interaction',
        'first_interaction'
    ]
    
    list_filter = [
        'is_active',
        'is_blocked',
        'is_bot',
        'language_code',
        'first_interaction',
        'last_interaction'
    ]
    
    search_fields = [
        'telegram_id',
        'username',
        'first_name',
        'last_name',
        'notes'
    ]
    
    readonly_fields = [
        'telegram_id',
        'username',
        'first_name',
        'last_name',
        'language_code',
        'is_bot',
        'first_interaction',
        'last_interaction',
        'interaction_count',
        'telegram_link'
    ]
    
    fieldsets = (
        ('üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ', {
            'fields': (
                'telegram_id',
                'username',
                'first_name',
                'last_name',
                'telegram_link',
                'language_code',
                'is_bot'
            ),
            'description': '–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ Telegram'
        }),
        ('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', {
            'fields': (
                'first_interaction',
                'last_interaction',
                'interaction_count',
            )
        }),
        ('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', {
            'fields': (
                'is_active',
                'is_blocked',
                'notes',
            )
        }),
    )
    
    date_hierarchy = 'last_interaction'
    actions = ['activate_users', 'deactivate_users', 'send_notification']
    
    def user_display(self, obj):
        """–ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if obj.username:
            return format_html(
                '<strong>@{}</strong><br><small>{}</small>',
                obj.username,
                obj.get_full_name()
            )
        return format_html('<strong>{}</strong>', obj.get_full_name())
    user_display.short_description = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    
    def telegram_link(self, obj):
        """–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram"""
        if obj.username:
            return format_html(
                '<a href="https://t.me/{}" target="_blank" '
                'style="background: #0088cc; color: white; padding: 8px 15px; '
                'border-radius: 4px; text-decoration: none; display: inline-block;">'
                'üí¨ –û—Ç–∫—Ä—ã—Ç—å –≤ Telegram</a>',
                obj.username
            )
        return "Username –Ω–µ —É–∫–∞–∑–∞–Ω"
    telegram_link.short_description = 'Telegram'
    
    def activate_users(self, request, queryset):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        updated = queryset.update(is_active=True)
        self.message_user(request, f'‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {updated}', level='success')
    activate_users.short_description = '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    
    def deactivate_users(self, request, queryset):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        updated = queryset.update(is_active=False)
        self.message_user(request, f'‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {updated}', level='warning')
    deactivate_users.short_description = '‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    
    def send_notification(self, request, queryset):
        """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user_ids = ','.join(str(u.id) for u in queryset)
        return format_html(
            '<script>window.location.href="/admin/telegram_bot/notification/add/?users={}";</script>',
            user_ids
        )
    send_notification.short_description = 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
    
    def has_add_permission(self, request):
        """–ó–∞–ø—Ä–µ—â–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Ä—É—á–Ω—É—é"""
        return False


@admin.register(Notification)
class NotificationAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    list_display = [
        'id',
        'title',
        'target_type',
        'status',
        'scheduled_for',
        'sent_at',
        'created_at'
    ]
    
    list_filter = [
        'status',
        'target_type',
        'created_at',
        'scheduled_for',
        'sent_at'
    ]
    
    search_fields = [
        'title',
        'message',
        'created_by'
    ]
    
    readonly_fields = [
        'total_recipients',
        'success_count',
        'failed_count',
        'sent_at',
        'created_at',
        'updated_at',
        'error_message',
        'preview_message'
    ]
    
    fieldsets = (
        ('üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': (
                'title',
                'message',
                'preview_message',
            ),
            'description': '–ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (HTML –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)'
        }),
        ('üéØ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è', {
            'fields': (
                'target_type',
                'target_user',
            ),
            'description': '–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
        }),
        ('üñºÔ∏è –ú–µ–¥–∏–∞', {
            'fields': (
                'image',
                'button_text',
                'button_url',
            ),
            'classes': ('collapse',),
            'description': '–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∞'
        }),
        ('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', {
            'fields': (
                'scheduled_for',
            ),
            'description': '–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏'
        }),
        ('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏', {
            'fields': (
                'total_recipients',
                'success_count',
                'failed_count',
                'sent_at',
                'error_message',
            ),
            'classes': ('collapse',)
        }),
        ('‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ', {
            'fields': (
                'created_by',
                'created_at',
                'updated_at',
            ),
            'classes': ('collapse',)
        }),
    )
    
    date_hierarchy = 'created_at'
    actions = ['send_notifications', 'duplicate_notification']
    
    def delivery_stats(self, obj):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
        if obj.status == 'sent':
            if obj.total_recipients > 0:
                success_rate = (obj.success_count / obj.total_recipients) * 100
                return format_html(
                    '<span style="color: green;">‚úÖ {}/{}</span> '
                    '<span style="color: gray;">({:.1f}%)</span>',
                    obj.success_count, obj.total_recipients, success_rate
                )
            return "‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        elif obj.status == 'failed':
            return format_html('<span style="color: red;">‚ùå –û—à–∏–±–∫–∞</span>')
        elif obj.status == 'sending':
            return format_html('<span style="color: orange;">‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...</span>')
        return "‚Äî"
    delivery_stats.short_description = '–î–æ—Å—Ç–∞–≤–∫–∞'
    
    def preview_message(self, obj):
        """–ü—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return format_html(
            '<div style="border: 1px solid #ddd; padding: 15px; border-radius: 8px; '
            'background: #f9f9f9; max-width: 600px;">{}</div>',
            obj.message
        )
    preview_message.short_description = '–ü—Ä–µ–≤—å—é'
    
    def save_model(self, request, obj, form, change):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º"""
        if not change:  # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            obj.created_by = request.user.username or request.user.email
            obj.total_recipients = obj.get_recipients_count()
        super().save_model(request, obj, form, change)
    
    def send_notifications(self, request, queryset):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        from telegram_bot.tasks import send_notification_task
        
        sent_count = 0
        for notification in queryset.filter(status='draft'):
            try:
                send_notification_task(notification.id)
                sent_count += 1
            except Exception as e:
                self.message_user(
                    request,
                    f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ "{notification.title}": {e}',
                    level='error'
                )
        
        if sent_count > 0:
            self.message_user(
                request,
                f'‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {sent_count}',
                level='success'
            )
    send_notifications.short_description = 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'
    
    def duplicate_notification(self, request, queryset):
        """–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        for notification in queryset:
            notification.pk = None
            notification.status = 'draft'
            notification.sent_at = None
            notification.success_count = 0
            notification.failed_count = 0
            notification.error_message = ''
            notification.title = f"{notification.title} (–∫–æ–ø–∏—è)"
            notification.save()
        
        self.message_user(request, f'‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–æ–ø–∏–π: {queryset.count()}', level='success')
    duplicate_notification.short_description = 'üìã –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'

