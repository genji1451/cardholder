"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
"""

import os
import sys
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

import django
django.setup()

from django.conf import settings
from apps.cards.models import Card
from telegram_bot.models import VerifiedCard
from telegram_bot.utils import get_card_image_path, format_card_info

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å ID –∫–∞—Ä—Ç—ã –≤ deep link
    if context.args:
        verify_code = context.args[0]
        await verify_card(update, context, verify_code)
        return
    
    welcome_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–µ–∫.\n\n"
        "üîç –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ –≤–∞—à–µ–π –∫–∞—Ä—Ç–µ, "
        "—á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—ë –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.\n\n"
        "‚ùì –ö–æ–º–∞–Ω–¥—ã:\n"
        "/help - –ü–æ–º–æ—â—å\n"
        "/info - –û –±–æ—Ç–µ"
    )
    
    await update.message.reply_text(welcome_message)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "üìñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "1Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ QR-–∫–æ–¥ –Ω–∞ –≤–∞—à–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ\n"
        "2Ô∏è‚É£ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ –∫–∞–º–µ—Ä–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ - –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥—ë—Ç–µ –≤ —ç—Ç–æ—Ç –±–æ—Ç\n"
        "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã –∏ –µ—ë —Ñ–æ—Ç–æ\n\n"
        "‚úÖ –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –ø–æ–¥–ª–∏–Ω–Ω–∞—è, –≤—ã —É–≤–∏–¥–∏—Ç–µ:\n"
        "  ‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–∞—Ä—Ç—ã\n"
        "  ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã\n"
        "  ‚Ä¢ –°–µ—Ä–∏—é –∏ —Ä–µ–¥–∫–æ—Å—Ç—å\n"
        "  ‚Ä¢ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏\n\n"
        "‚ùå –ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø–æ–¥–¥–µ–ª—å–Ω–∞—è, "
        "–≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n"
        "‚ö†Ô∏è –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫–∞—Ä—Ç —É –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤!"
    )
    
    await update.message.reply_text(help_text, parse_mode='HTML')


async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info"""
    info_text = (
        "‚ÑπÔ∏è <b>–û —Å–∏—Å—Ç–µ–º–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏</b>\n\n"
        "–ö–∞–∂–¥–∞—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π QR-–∫–æ–¥, "
        "–∫–æ—Ç–æ—Ä—ã–π –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–¥–µ–ª–∞—Ç—å.\n\n"
        "üîê QR-–∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
        "  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ä—Ç—ã\n"
        "  ‚Ä¢ –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä\n"
        "  ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–∏–∏\n\n"
        "–≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—â–∞–µ—Ç –≤–∞—Å –æ—Ç –ø–æ–¥–¥–µ–ª–æ–∫ –∏ –ø–æ–º–æ–≥–∞–µ—Ç "
        "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n\n"
        "üíº –î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–π: –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "
        "—ç—Ç–æ—Ç –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–∏–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—ë–º."
    )
    
    await update.message.reply_text(info_text, parse_mode='HTML')


async def verify_card(update: Update, context: ContextTypes.DEFAULT_TYPE, verify_code: str) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã –ø–æ –∫–æ–¥—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        verify_code: –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ QR-–∫–æ–¥–∞
    """
    try:
        # –ò—â–µ–º –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ –∫–æ–¥—É
        verified_card = VerifiedCard.objects.select_related('card', 'card__series').get(
            verification_code=verify_code,
            is_active=True
        )
        
        card = verified_card.card
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
        card_info = format_card_info(card, verified_card)
        
        # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∫–∞—Ä—Ç—ã
        image_path = get_card_image_path(card)
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞—Ä—Ç–µ", callback_data=f"details_{verified_card.id}"),
            ],
            [
                InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data=f"share_{verified_card.id}"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        if image_path and os.path.exists(image_path):
            with open(image_path, 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=card_info,
                    parse_mode='HTML',
                    reply_markup=reply_markup
                )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await update.message.reply_text(
                card_info,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫
        verified_card.verification_count += 1
        verified_card.save()
        
        logger.info(f"Card {card.id} verified by user {update.effective_user.id}")
        
    except VerifiedCard.DoesNotExist:
        # –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
        error_message = (
            "‚ùå <b>–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
            "–≠—Ç–∞ –∫–∞—Ä—Ç–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –±—ã–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
            "‚ö†Ô∏è <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
            "  ‚Ä¢ –ö–∞—Ä—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–¥–µ–ª–∫–æ–π\n"
            "  ‚Ä¢ QR-–∫–æ–¥ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω\n"
            "  ‚Ä¢ –ö–∞—Ä—Ç–∞ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É\n\n"
            "üõ°Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏."
        )
        
        await update.message.reply_text(error_message, parse_mode='HTML')
        logger.warning(f"Verification failed for code: {verify_code}")
        
    except Exception as e:
        logger.error(f"Error verifying card: {e}")
        await update.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode='HTML'
        )


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data.startswith("details_"):
        verified_card_id = int(data.split("_")[1])
        try:
            verified_card = VerifiedCard.objects.select_related('card', 'card__series').get(id=verified_card_id)
            card = verified_card.card
            
            details_text = (
                f"üìä <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
                f"üé¥ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {card.title}\n"
                f"üî¢ <b>–ù–æ–º–µ—Ä:</b> #{card.number}\n"
                f"üìö <b>–°–µ—Ä–∏—è:</b> {card.series.title}\n"
                f"üíé <b>–†–µ–¥–∫–æ—Å—Ç—å:</b> {card.get_rarity_display()}\n"
                f"üí∞ <b>–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {card.base_price_rub} ‚ÇΩ\n"
                f"üîç <b>–ü—Ä–æ–≤–µ—Ä–æ–∫:</b> {verified_card.verification_count}\n"
                f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {verified_card.created_at.strftime('%d.%m.%Y')}\n"
            )
            
            if card.notes:
                details_text += f"\nüìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b> {card.notes}"
            
            await query.edit_message_caption(
                caption=details_text,
                parse_mode='HTML'
            )
            
        except VerifiedCard.DoesNotExist:
            await query.edit_message_caption(
                caption="‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                parse_mode='HTML'
            )
    
    elif data.startswith("share_"):
        verified_card_id = int(data.split("_")[1])
        try:
            verified_card = VerifiedCard.objects.get(id=verified_card_id)
            bot_username = context.bot.username
            share_url = f"https://t.me/{bot_username}?start={verified_card.verification_code}"
            
            share_text = (
                f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ä—Ç—ã:</b>\n\n"
                f"<code>{share_url}</code>\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç—ã."
            )
            
            await query.message.reply_text(share_text, parse_mode='HTML')
            
        except VerifiedCard.DoesNotExist:
            await query.message.reply_text(
                "‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                parse_mode='HTML'
            )


async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await update.message.reply_text(
        "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ –≤–∞—à–µ–π –∫–∞—Ä—Ç–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–º–æ—â–∏."
    )


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django
    token = settings.TELEGRAM_BOT_TOKEN
    
    if not token or token == "YOUR_BOT_TOKEN":
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings.py")
        return
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("info", info_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –æ—Ç inline –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    application.add_handler(MessageHandler(filters.COMMAND | filters.TEXT, unknown_command))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()

