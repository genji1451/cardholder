"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è —á–∞—Å—Ç—å Telegram –±–æ—Ç–∞
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã
"""

import os
import sys
from io import BytesIO
from asgiref.sync import sync_to_async
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

import django
django.setup()

from django.conf import settings
from telegram_bot.models import VerifiedCard
from telegram_bot.utils import create_card_qr_code, get_qr_codes_directory

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_FOR_PHOTO_1 = 1
WAITING_FOR_NAME = 2
WAITING_FOR_DESCRIPTION = 3
WAITING_FOR_PHOTO_2 = 4

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π Telegram ID)
ADMIN_IDS = [1918066256]


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, –ø–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
    if not ADMIN_IDS:
        return True
    return user_id in ADMIN_IDS


async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã"""
    user_id = update.effective_user.id
    
    if not is_admin(user_id):
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
        )
        return ConversationHandler.END
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É", callback_data="add_card")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∫–∞—Ä—Ç—ã", callback_data="my_cards")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∞–º–∏!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    
    return ConversationHandler.END


async def add_card_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text(
        "üì∏ <b>–®–∞–≥ 1/4: –§–æ—Ç–æ –∫–∞—Ä—Ç—ã</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫–∞—Ä—Ç—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª, –¥–æ —É–ø–∞–∫–æ–≤–∫–∏).\n\n"
        "üí° –°–æ–≤–µ—Ç—ã:\n"
        "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
        "‚Ä¢ –ö–∞—Ä—Ç–∞ –≤ —Ñ–æ–∫—É—Å–µ\n"
        "‚Ä¢ –í–∏–¥–Ω—ã –≤—Å–µ –¥–µ—Ç–∞–ª–∏\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode='HTML'
    )
    
    return WAITING_FOR_PHOTO_1


async def receive_photo_1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç—ã"""
    photo = update.message.photo[-1]  # –ë–µ—Ä—ë–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['photo_1_file_id'] = photo.file_id
    
    await update.message.reply_text(
        "‚úÖ –§–æ—Ç–æ –∫–∞—Ä—Ç—ã –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
        "üìù <b>–®–∞–≥ 2/4: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>–ß–µ–ª–æ–≤–µ–∫-–ü–∞—É–∫ #1 –£–ª—å—Ç—Ä–∞</code>\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode='HTML'
    )
    
    return WAITING_FOR_NAME


async def receive_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã"""
    card_name = update.message.text.strip()
    context.user_data['card_name'] = card_name
    
    await update.message.reply_text(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{card_name}</b>\n\n"
        "üìù <b>–®–∞–≥ 3/4: –û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.\n"
        "–£–∫–∞–∂–∏—Ç–µ:\n"
        "‚Ä¢ –°–µ—Ä–∏—é\n"
        "‚Ä¢ –†–µ–¥–∫–æ—Å—Ç—å\n"
        "‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        parse_mode='HTML'
    )
    
    return WAITING_FOR_DESCRIPTION


async def receive_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç—ã"""
    if update.message.text == '/skip':
        context.user_data['description'] = ''
    else:
        context.user_data['description'] = update.message.text.strip()
    
    try:
        # –°–æ–∑–¥–∞—ë–º –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É (–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)
        @sync_to_async
        def create_card():
            return VerifiedCard.objects.create(
                card_name=context.user_data['card_name'],
                description=context.user_data.get('description', '')
            )
        
        verified_card = await create_card()
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
        photo_file = await context.bot.get_file(context.user_data['photo_1_file_id'])
        photo_bytes = await photo_file.download_as_bytearray()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ (–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ)
        @sync_to_async
        def save_photo(card_id):
            from django.core.files.base import ContentFile
            card = VerifiedCard.objects.get(id=card_id)
            card.photo_original.save(
                f'card_{card.id}_original.jpg',
                ContentFile(bytes(photo_bytes)),
                save=True
            )
            return card
        
        verified_card = await save_photo(verified_card.id)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
        bot_username = settings.TELEGRAM_BOT_USERNAME
        qr_buffer = create_card_qr_code(verified_card, bot_username)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞—Ä—Ç—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        context.user_data['verified_card_id'] = verified_card.id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ —Å –∫–æ—Ä–æ—Ç–∫–∏–º caption
        qr_buffer.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ
        await update.message.reply_photo(
            photo=qr_buffer,
            caption=f"üì± QR-–∫–æ–¥ –¥–ª—è –∫–∞—Ä—Ç—ã: {verified_card.card_name}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await update.message.reply_text(
            "‚úÖ <b>–ö–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üé¥ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{verified_card.card_name}</b>\n"
            f"üîë –ö–æ–¥: <code>{verified_card.verification_code}</code>\n\n"
            "üñ®Ô∏è <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:</b>\n"
            "1. –†–∞—Å–ø–µ—á–∞—Ç–∞–π—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥\n"
            "2. –ù–∞–∫–ª–µ–π—Ç–µ QR –Ω–∞ –∫–µ–π—Å —Å –∫–∞—Ä—Ç–æ–π\n"
            "3. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —É–ø–∞–∫–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É\n\n"
            "üì∏ <b>–®–∞–≥ 4/4: –§–æ—Ç–æ —É–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç—ã —Å –Ω–∞–∫–ª–µ–µ–Ω–Ω—ã–º QR-–∫–æ–¥–æ–º\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ",
            parse_mode='HTML'
        )
        
        return WAITING_FOR_PHOTO_2
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /admin"
        )
        context.user_data.clear()
        return ConversationHandler.END


async def receive_photo_2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ç–æ (—É–ø–∞–∫–æ–≤–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞)"""
    verified_card_id = context.user_data.get('verified_card_id')
    
    if not verified_card_id:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return ConversationHandler.END
    
    if update.message.text == '/skip':
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –±–µ–∑ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ç–æ
        @sync_to_async
        def get_card():
            return VerifiedCard.objects.get(id=verified_card_id)
        
        verified_card = await get_card()
        bot_link = verified_card.get_bot_link(settings.TELEGRAM_BOT_USERNAME)
        
        await update.message.reply_text(
            "‚úÖ <b>–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üé¥ {verified_card.card_name}\n"
            f"üîë –ö–æ–¥: <code>{verified_card.verification_code}</code>\n\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
            f"<code>{bot_link}</code>\n\n"
            "–ö–ª–∏–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç—ã!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é",
            parse_mode='HTML'
        )
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        photo_file = await context.bot.get_file(photo.file_id)
        photo_bytes = await photo_file.download_as_bytearray()
        
        @sync_to_async
        def save_packaged_photo():
            from django.core.files.base import ContentFile
            card = VerifiedCard.objects.get(id=verified_card_id)
            card.photo_packaged.save(
                f'card_{card.id}_packaged.jpg',
                ContentFile(bytes(photo_bytes)),
                save=True
            )
            return card
        
        verified_card = await save_packaged_photo()
        bot_link = verified_card.get_bot_link(settings.TELEGRAM_BOT_USERNAME)
        
        await update.message.reply_text(
            "‚úÖ <b>–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üé¥ {verified_card.card_name}\n"
            f"üîë –ö–æ–¥: <code>{verified_card.verification_code}</code>\n\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n"
            f"<code>{bot_link}</code>\n\n"
            "‚úÖ –û–±–∞ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!\n"
            "–ö–ª–∏–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –∫–∞—Ä—Ç—É –¥–æ –∏ –ø–æ—Å–ª–µ —É–ø–∞–∫–æ–≤–∫–∏.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é",
            parse_mode='HTML'
        )
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context.user_data.clear()
    
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    context.user_data.clear()
    
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"
    )
    
    return ConversationHandler.END


async def my_cards(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç"""
    query = update.callback_query
    await query.answer()
    
    @sync_to_async
    def get_cards():
        return list(VerifiedCard.objects.filter(is_active=True).order_by('-created_at')[:10])
    
    cards = await get_cards()
    
    if not cards:
        await query.edit_message_text(
            "üìã <b>–ú–æ–∏ –∫–∞—Ä—Ç—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã",
            parse_mode='HTML'
        )
        return  # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –≤—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    
    message = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∫–∞—Ä—Ç:</b>\n\n"
    
    for i, card in enumerate(cards, 1):
        status = "‚úÖ" if card.is_active else "‚ùå"
        message += (
            f"{i}. {status} <b>{card.card_name}</b>\n"
            f"   –ö–æ–¥: <code>{card.verification_code[:8]}...</code>\n"
            f"   –ü—Ä–æ–≤–µ—Ä–æ–∫: {card.verification_count}\n\n"
        )
    
    message += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"
    
    await query.edit_message_text(message, parse_mode='HTML')


async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    query = update.callback_query
    await query.answer()
    
    @sync_to_async
    def get_stats():
        total_cards = VerifiedCard.objects.count()
        active_cards = VerifiedCard.objects.filter(is_active=True).count()
        total_checks = sum(VerifiedCard.objects.values_list('verification_count', flat=True) or [0])
        top_cards = list(VerifiedCard.objects.order_by('-verification_count')[:3])
        return total_cards, active_cards, total_checks, top_cards
    
    total_cards, active_cards, total_checks, top_cards = await get_stats()
    
    message = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üé¥ –í—Å–µ–≥–æ –∫–∞—Ä—Ç: <b>{total_cards}</b>\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{active_cards}</b>\n"
        f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: <b>{total_cards - active_cards}</b>\n"
        f"üîç –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: <b>{total_checks}</b>\n\n"
    )
    
    if total_cards > 0:
        avg_checks = total_checks / total_cards
        message += f"üìà –°—Ä–µ–¥–Ω–µ–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∞ –∫–∞—Ä—Ç—É: <b>{avg_checks:.1f}</b>\n\n"
    
    # –¢–æ–ø-3 –∫–∞—Ä—Ç—ã
    if top_cards:
        message += "üèÜ <b>–¢–æ–ø-3 –∫–∞—Ä—Ç—ã:</b>\n"
        for i, card in enumerate(top_cards, 1):
            message += f"{i}. {card.card_name} - {card.verification_count} –ø—Ä–æ–≤–µ—Ä–æ–∫\n"
    
    message += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"
    
    await query.edit_message_text(message, parse_mode='HTML')


async def callback_router(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–†–æ—É—Ç–µ—Ä –¥–ª—è callback –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    data = query.data
    
    if data == "add_card":
        return await add_card_start(update, context)
    elif data == "my_cards":
        await my_cards(update, context)
        return ConversationHandler.END
    elif data == "stats":
        await stats(update, context)
        return ConversationHandler.END
    
    return ConversationHandler.END


# –°–æ–∑–¥–∞—ë–º ConversationHandler –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
def get_admin_conversation_handler():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ConversationHandler –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
    return ConversationHandler(
        entry_points=[
            CallbackQueryHandler(callback_router, pattern='^(add_card|my_cards|stats)$')
        ],
        states={
            WAITING_FOR_PHOTO_1: [
                MessageHandler(filters.PHOTO, receive_photo_1),
                CommandHandler('cancel', cancel),
            ],
            WAITING_FOR_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_name),
                CommandHandler('cancel', cancel),
            ],
            WAITING_FOR_DESCRIPTION: [
                MessageHandler(filters.TEXT, receive_description),
                CommandHandler('cancel', cancel),
            ],
            WAITING_FOR_PHOTO_2: [
                MessageHandler(filters.PHOTO | filters.TEXT, receive_photo_2),
                CommandHandler('cancel', cancel),
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_message=False,  # –í–∞–∂–Ω–æ –¥–ª—è callback'–æ–≤
        per_chat=True,
        per_user=True,
    )

