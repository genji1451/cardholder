"""
–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
–° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–¥–º–∏–Ω–∫–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
"""

import os
import sys
import logging
from asgiref.sync import sync_to_async
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

import django
django.setup()

from django.conf import settings
from telegram_bot.models import VerifiedCard, VerificationLog, BotUser
from telegram_bot.bot_admin import (
    admin_start,
    get_admin_conversation_handler,
    is_admin,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def get_or_create_user(telegram_user) -> BotUser:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
    
    Args:
        telegram_user: –û–±—ä–µ–∫—Ç User –∏–∑ Telegram
        
    Returns:
        BotUser: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    """
    @sync_to_async
    def get_or_create():
        user, created = BotUser.objects.get_or_create(
            telegram_id=telegram_user.id,
            defaults={
                'username': telegram_user.username or '',
                'first_name': telegram_user.first_name or '',
                'last_name': telegram_user.last_name or '',
                'language_code': telegram_user.language_code or '',
                'is_bot': telegram_user.is_bot,
            }
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
        if not created:
            updated = False
            if user.username != (telegram_user.username or ''):
                user.username = telegram_user.username or ''
                updated = True
            if user.first_name != (telegram_user.first_name or ''):
                user.first_name = telegram_user.first_name or ''
                updated = True
            if user.last_name != (telegram_user.last_name or ''):
                user.last_name = telegram_user.last_name or ''
                updated = True
            
            if updated:
                user.save()
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
            user.increment_interaction()
        else:
            logger.info(f"New user registered: {user}")
        
        return user
    
    return await get_or_create()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_id = user.id
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await get_or_create_user(user)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å –∫–æ–¥–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if context.args:
        verify_code = context.args[0]
        await verify_card_by_code(update, context, verify_code)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if is_admin(user_id):
        keyboard = [
            [InlineKeyboardButton("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
        ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "üé¥ –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç.\n\n"
        "üîç <b>–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ä—Ç—É:</b>\n"
        "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ –∫–∞—Ä—Ç—ã –∫–∞–º–µ—Ä–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–∞ "
        "–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ.\n\n"
    )
    
    if is_admin(user_id):
        welcome_message += (
            "üîê <b>–í—ã - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</b>\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∞–º–∏."
        )
    
    await update.message.reply_text(
        welcome_message,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )


async def admin_panel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Callback –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    query = update.callback_query
    await query.answer()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await get_or_create_user(query.from_user)
    
    user_id = query.from_user.id
    
    if not is_admin(user_id):
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É", callback_data="add_card")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∫–∞—Ä—Ç—ã", callback_data="my_cards")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–∞–º–∏!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )


async def verify_card_by_code(update: Update, context: ContextTypes.DEFAULT_TYPE, verify_code: str) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã –ø–æ –∫–æ–¥—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    
    Args:
        update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        verify_code: –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ QR-–∫–æ–¥–∞
    """
    try:
        # –ò—â–µ–º –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ –∫–æ–¥—É
        @sync_to_async
        def get_card_and_increment():
            card = VerifiedCard.objects.get(
                verification_code=verify_code,
                is_active=True
            )
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫
            card.verification_count += 1
            card.save()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
            VerificationLog.objects.create(
                verified_card=card,
                telegram_user_id=update.effective_user.id,
                telegram_username=update.effective_user.username or ''
            )
            
            return card
        
        verified_card = await get_card_and_increment()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
        card_info = (
            "‚úÖ –ö–∞—Ä—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—â–∏—Ç—ã\n\n"
            f"üé¥ <b>{verified_card.card_name}</b>\n\n"
        )
        
        if verified_card.description:
            card_info += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{verified_card.description}\n\n"
        
        card_info += (
            f"üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: <b>{verified_card.verification_count}</b> —Ä–∞–∑\n"
            f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–∞: <b>{verified_card.created_at.strftime('%d.%m.%Y')}</b>\n\n"
            "üõ°Ô∏è <b>–ö–∞—Ä—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—â–∏—Ç—ã</b>"
        )
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data=f"share_{verified_card.id}")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        media = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ
        if verified_card.photo_original:
            try:
                photo_path = verified_card.photo_original.path
                if os.path.exists(photo_path):
                    with open(photo_path, 'rb') as photo:
                        media.append(InputMediaPhoto(
                            media=photo.read(),
                            caption="üì∏ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞"
                        ))
            except Exception as e:
                logger.warning(f"Could not load original photo: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ —É–ø–∞–∫–æ–≤–∫–µ
        if verified_card.photo_packaged:
            try:
                photo_path = verified_card.photo_packaged.path
                if os.path.exists(photo_path):
                    with open(photo_path, 'rb') as photo:
                        media.append(InputMediaPhoto(
                            media=photo.read(),
                            caption="üì¶ –ö–∞—Ä—Ç–∞ –≤ —É–ø–∞–∫–æ–≤–∫–µ"
                        ))
            except Exception as e:
                logger.warning(f"Could not load packaged photo: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ
        if media:
            await update.message.reply_media_group(media=media)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        await update.message.reply_text(
            card_info,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
        
        logger.info(f"Card {verified_card.id} verified by user {update.effective_user.id}")
        
    except VerifiedCard.DoesNotExist:
        # –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        error_message = (
            "‚ùå <b>–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
            "–≠—Ç–∞ –∫–∞—Ä—Ç–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –±—ã–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
            "‚ö†Ô∏è <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>\n"
            "  ‚Ä¢ –ö–∞—Ä—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–¥–µ–ª–∫–æ–π\n"
            "  ‚Ä¢ QR-–∫–æ–¥ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω\n"
            "  ‚Ä¢ –ö–∞—Ä—Ç–∞ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º—É\n\n"
            "üõ°Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º."
        )
        
        await update.message.reply_text(error_message, parse_mode='HTML')
        logger.warning(f"Verification failed for code: {verify_code}")
        
    except Exception as e:
        logger.error(f"Error verifying card: {e}", exc_info=True)
        await update.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞—Ä—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        )


async def help_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Callback –¥–ª—è –ø–æ–º–æ—â–∏"""
    query = update.callback_query
    await query.answer()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await get_or_create_user(query.from_user)
    
    help_text = (
        "üìñ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "1Ô∏è‚É£ –ù–∞–π–¥–∏—Ç–µ QR-–∫–æ–¥ –Ω–∞ —É–ø–∞–∫–æ–≤–∫–µ –∫–∞—Ä—Ç—ã\n"
        "2Ô∏è‚É£ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –µ–≥–æ –∫–∞–º–µ—Ä–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ\n"
        "4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ –∏ —Ñ–æ—Ç–æ\n\n"
        "‚úÖ <b>–ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –ø–æ–¥–ª–∏–Ω–Ω–∞—è, –≤—ã —É–≤–∏–¥–∏—Ç–µ:</b>\n"
        "  ‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫–∞—Ä—Ç—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª –∏ –≤ —É–ø–∞–∫–æ–≤–∫–µ)\n"
        "  ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "  ‚Ä¢ –°—Ç–∞—Ç—É—Å –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏\n\n"
        "‚ùå <b>–ï—Å–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:</b>\n"
        "–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –ø–æ–¥–¥–µ–ª–∫–∞ –∏–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
        "‚ö†Ô∏è –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ!"
    )
    
    await query.edit_message_text(help_text, parse_mode='HTML')


async def share_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è"""
    query = update.callback_query
    await query.answer()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await get_or_create_user(query.from_user)
    
    data = query.data
    verified_card_id = int(data.split("_")[1])
    
    try:
        @sync_to_async
        def get_card():
            return VerifiedCard.objects.get(id=verified_card_id)
        
        verified_card = await get_card()
        bot_username = context.bot.username
        share_url = verified_card.get_bot_link(bot_username)
        
        share_text = (
            f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ä—Ç—ã:</b>\n\n"
            f"<code>{share_url}</code>\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç—ã."
        )
        
        await query.message.reply_text(share_text, parse_mode='HTML')
        
    except VerifiedCard.DoesNotExist:
        await query.message.reply_text("‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await get_or_create_user(update.effective_user)
    
    await update.message.reply_text(
        "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)\n"
        "/help - –ü–æ–º–æ—â—å"
    )


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django
    token = settings.TELEGRAM_BOT_TOKEN
    
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings.py")
        return
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ (–î–û–õ–ñ–ù–´ –ë–´–¢–¨ –ü–ï–†–ï–î ConversationHandler!)
    application.add_handler(CallbackQueryHandler(admin_panel_callback, pattern='^admin_panel$'))
    application.add_handler(CallbackQueryHandler(help_callback, pattern='^help$'))
    application.add_handler(CallbackQueryHandler(share_callback, pattern='^share_'))
    
    # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandler –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ (–ø–æ—Å–ª–µ callback handlers)
    application.add_handler(get_admin_conversation_handler())
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    application.add_handler(MessageHandler(filters.COMMAND | filters.TEXT, unknown_command))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()

