"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
"""

from django.core.management.base import BaseCommand
from django.conf import settings
from apps.cards.models import Card
from telegram_bot.models import VerifiedCard
from telegram_bot.utils import create_card_qr_code, get_qr_codes_directory
import os


class Command(BaseCommand):
    help = '–°–æ–∑–¥–∞—ë—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ä—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'

    def add_arguments(self, parser):
        parser.add_argument(
            '--series',
            type=int,
            help='–°–æ–∑–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ—Ä–∏–∏',
        )
        parser.add_argument(
            '--generate-qr',
            action='store_true',
            help='–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏—Ö –≤ —Ñ–∞–π–ª—ã',
        )
        parser.add_argument(
            '--overwrite',
            action='store_true',
            help='–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        )

    def handle(self, *args, **options):
        series_filter = options.get('series')
        generate_qr = options.get('generate_qr', False)
        overwrite = options.get('overwrite', False)

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã
        cards = Card.objects.all()
        if series_filter:
            cards = cards.filter(series__number=series_filter)
            self.stdout.write(f'üìö –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç —Å–µ—Ä–∏–∏ {series_filter}')
        else:
            self.stdout.write('üìö –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç')

        created_count = 0
        skipped_count = 0
        qr_generated = 0

        bot_username = getattr(settings, 'TELEGRAM_BOT_USERNAME', 'your_bot')
        qr_dir = get_qr_codes_directory() if generate_qr else None

        for card in cards:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
            existing = VerifiedCard.objects.filter(card=card).first()
            
            if existing and not overwrite:
                self.stdout.write(
                    self.style.WARNING(f'‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {card.title} #{card.number} (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)')
                )
                skipped_count += 1
                continue
            
            if existing and overwrite:
                existing.delete()
                self.stdout.write(
                    self.style.WARNING(f'üîÑ –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º {card.title} #{card.number}')
                )

            # –°–æ–∑–¥–∞—ë–º –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
            verified_card = VerifiedCard.objects.create(
                card=card,
                notes=f'–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è {card.series.title}'
            )
            
            self.stdout.write(
                self.style.SUCCESS(f'‚úÖ –°–æ–∑–¥–∞–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è {card.title} #{card.number}')
            )
            created_count += 1

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if generate_qr and qr_dir:
                qr_filename = f'card_{card.series.number}_{card.number}.png'
                qr_path = os.path.join(qr_dir, qr_filename)
                
                create_card_qr_code(verified_card, bot_username, save_path=qr_path)
                self.stdout.write(f'   üì± QR-–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {qr_filename}')
                qr_generated += 1

        # –ò—Ç–æ–≥–∏
        self.stdout.write('\n' + '='*50)
        self.stdout.write(self.style.SUCCESS(f'‚úÖ –°–æ–∑–¥–∞–Ω–æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π: {created_count}'))
        if skipped_count > 0:
            self.stdout.write(self.style.WARNING(f'‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}'))
        if qr_generated > 0:
            self.stdout.write(self.style.SUCCESS(f'üì± QR-–∫–æ–¥–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {qr_generated}'))
            self.stdout.write(f'   –ü–∞–ø–∫–∞: {qr_dir}')
        self.stdout.write('='*50)

