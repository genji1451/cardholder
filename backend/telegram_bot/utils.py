"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º –∏ QR-–∫–æ–¥–∞–º–∏
"""

import os
import qrcode
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
from django.conf import settings
from apps.cards.models import Card
from telegram_bot.models import VerifiedCard


def generate_qr_code(data: str, size: int = 300) -> BytesIO:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ —Å –¥–∞–Ω–Ω—ã–º–∏
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ QR
        size: –†–∞–∑–º–µ—Ä QR-–∫–æ–¥–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    
    Returns:
        BytesIO –æ–±—ä–µ–∫—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º QR-–∫–æ–¥–∞
    """
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_H,
        box_size=10,
        border=4,
    )
    qr.add_data(data)
    qr.make(fit=True)
    
    img = qr.make_image(fill_color="black", back_color="white")
    img = img.resize((size, size), Image.LANCZOS)
    
    buffer = BytesIO()
    img.save(buffer, format='PNG')
    buffer.seek(0)
    
    return buffer


def generate_qr_code_with_logo(data: str, logo_path: str = None, size: int = 300) -> BytesIO:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –≤ —Ü–µ–Ω—Ç—Ä–µ
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        logo_path: –ü—É—Ç—å –∫ –ª–æ–≥–æ—Ç–∏–ø—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        size: –†–∞–∑–º–µ—Ä QR-–∫–æ–¥–∞
    
    Returns:
        BytesIO –æ–±—ä–µ–∫—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    """
    # –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π QR-–∫–æ–¥
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_H,
        box_size=10,
        border=4,
    )
    qr.add_data(data)
    qr.make(fit=True)
    
    img = qr.make_image(fill_color="black", back_color="white").convert('RGB')
    img = img.resize((size, size), Image.LANCZOS)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –µ—Å–ª–∏ –µ—Å—Ç—å
    if logo_path and os.path.exists(logo_path):
        try:
            logo = Image.open(logo_path)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ—Ç–∏–ø–∞ (20% –æ—Ç QR-–∫–æ–¥–∞)
            logo_size = int(size * 0.2)
            logo = logo.resize((logo_size, logo_size), Image.LANCZOS)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            logo_pos = ((size - logo_size) // 2, (size - logo_size) // 2)
            
            # –°–æ–∑–¥–∞—ë–º –±–µ–ª—ã–π —Ñ–æ–Ω –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–∞
            logo_bg = Image.new('RGB', (logo_size + 20, logo_size + 20), 'white')
            logo_bg_pos = ((size - logo_size - 20) // 2, (size - logo_size - 20) // 2)
            
            img.paste(logo_bg, logo_bg_pos)
            img.paste(logo, logo_pos, logo if logo.mode == 'RGBA' else None)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
    
    buffer = BytesIO()
    img.save(buffer, format='PNG')
    buffer.seek(0)
    
    return buffer


def create_card_qr_code(verified_card: VerifiedCard, bot_username: str, 
                        save_path: str = None) -> BytesIO:
    """
    –°–æ–∑–¥–∞—ë—Ç QR-–∫–æ–¥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã
    
    Args:
        verified_card: –û–±—ä–µ–∫—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
        bot_username: Username Telegram –±–æ—Ç–∞
        save_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        BytesIO —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º QR-–∫–æ–¥–∞
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞
    bot_link = verified_card.get_bot_link(bot_username)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
    qr_buffer = generate_qr_code(bot_link, size=400)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
    if save_path:
        os.makedirs(os.path.dirname(save_path), exist_ok=True)
        with open(save_path, 'wb') as f:
            f.write(qr_buffer.getvalue())
        qr_buffer.seek(0)
    
    return qr_buffer


def get_card_image_path(card: Card) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∫–∞—Ä—Ç—ã
    
    Args:
        card: –û–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã
    
    Returns:
        –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∫–∞—Ä—Ç—ã
    """
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:
    # frontend/public/images/spiderman/series{X}/card_{Y}.svg (–∏–ª–∏ .png)
    
    base_path = os.path.join(
        settings.BASE_DIR.parent,
        'frontend',
        'public',
        'images',
        'spiderman',
        f'series{card.series.number}'
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for ext in ['.svg', '.png', '.jpg', '.jpeg', '.webp']:
        image_path = os.path.join(base_path, f'card_{card.number}{ext}')
        if os.path.exists(image_path):
            return image_path
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return os.path.join(base_path, f'card_{card.number}.svg')


def format_card_info(card: Card, verified_card: VerifiedCard) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
    
    Args:
        card: –û–±—ä–µ–∫—Ç –∫–∞—Ä—Ç—ã
        verified_card: –û–±—ä–µ–∫—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
    
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    status_emoji = "‚úÖ" if verified_card.is_active else "‚ùå"
    rarity_emoji = {
        "–æ": "‚ö™Ô∏è",  # –û–±—ã—á–Ω–∞—è
        "—Å–∫": "üîµ",  # –°—Ä–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞
        "—É–∫": "üü£",  # –£–ª—å—Ç—Ä–∞ –∫–∞—Ä—Ç–∞
    }.get(card.rarity, "‚ö™Ô∏è")
    
    info = (
        f"{status_emoji} <b>–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –ö–ê–†–¢–ê</b>\n\n"
        f"üé¥ <b>{card.title}</b>\n"
        f"üî¢ –ù–æ–º–µ—Ä: <b>#{card.number}</b>\n"
        f"üìö –°–µ—Ä–∏—è: <b>{card.series.title}</b>\n"
        f"{rarity_emoji} –†–µ–¥–∫–æ—Å—Ç—å: <b>{card.get_rarity_display()}</b>\n"
    )
    
    if card.base_price_rub:
        info += f"üí∞ –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{card.base_price_rub} ‚ÇΩ</b>\n"
    
    info += f"\nüîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: <b>{verified_card.verification_count}</b> —Ä–∞–∑\n"
    
    if verified_card.notes:
        info += f"\nüìù {verified_card.notes}"
    
    info += "\n\nüõ°Ô∏è –ö–∞—Ä—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π –∑–∞—â–∏—Ç—ã."
    
    return info


def get_qr_codes_directory():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è QR-–∫–æ–¥–æ–≤"""
    qr_dir = os.path.join(settings.MEDIA_ROOT, 'qr_codes')
    os.makedirs(qr_dir, exist_ok=True)
    return qr_dir


def generate_printable_card_label(verified_card: VerifiedCard, bot_username: str) -> BytesIO:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
    –í–∫–ª—é—á–∞–µ—Ç QR-–∫–æ–¥ –∏ –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    
    Args:
        verified_card: –û–±—ä–µ–∫—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã
        bot_username: Username –±–æ—Ç–∞
    
    Returns:
        BytesIO —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –º–µ—Ç–∫–∏
    """
    card = verified_card.card
    
    # –†–∞–∑–º–µ—Ä—ã –º–µ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã)
    label_width = 600
    label_height = 200
    
    # –°–æ–∑–¥–∞—ë–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    img = Image.new('RGB', (label_width, label_height), 'white')
    draw = ImageDraw.Draw(img)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
    qr_buffer = create_card_qr_code(verified_card, bot_username)
    qr_img = Image.open(qr_buffer)
    qr_img = qr_img.resize((180, 180), Image.LANCZOS)
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º QR-–∫–æ–¥ —Å–ª–µ–≤–∞
    img.paste(qr_img, (10, 10))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–ø—Ä–∞–≤–∞
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
        font_large = ImageFont.truetype("/System/Library/Fonts/Helvetica.ttc", 24)
        font_medium = ImageFont.truetype("/System/Library/Fonts/Helvetica.ttc", 18)
        font_small = ImageFont.truetype("/System/Library/Fonts/Helvetica.ttc", 14)
    except:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        font_large = ImageFont.load_default()
        font_medium = ImageFont.load_default()
        font_small = ImageFont.load_default()
    
    # –¢–µ–∫—Å—Ç
    text_x = 210
    draw.text((text_x, 20), card.title, fill='black', font=font_large)
    draw.text((text_x, 55), f"–°–µ—Ä–∏—è: {card.series.title}", fill='black', font=font_medium)
    draw.text((text_x, 85), f"–ù–æ–º–µ—Ä: #{card.number}", fill='black', font=font_medium)
    draw.text((text_x, 115), f"–†–µ–¥–∫–æ—Å—Ç—å: {card.get_rarity_display()}", fill='black', font=font_medium)
    draw.text((text_x, 155), "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", fill='gray', font=font_small)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ BytesIO
    buffer = BytesIO()
    img.save(buffer, format='PNG')
    buffer.seek(0)
    
    return buffer

