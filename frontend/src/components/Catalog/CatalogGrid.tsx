import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import apiClient from '../../api/client';
import { getCardImageFromData } from '../../utils/imageUtils';
import './CatalogGrid.css';

const CatalogGrid = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedRarity, setSelectedRarity] = useState('all');
  const [selectedSeries, setSelectedSeries] = useState('all');
  const queryClient = useQueryClient();

  // Fetch cards data
  const { data: cardsData, isLoading, error } = useQuery({
    queryKey: ['cards'],
    queryFn: async () => {
      const response = await apiClient.get('/cards/');
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é - –±–µ—Ä–µ–º results –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ –≤–µ—Å—å response
      return response.data.results || response.data;
    },
  });

  // Fetch inventory data to show which cards are owned
  const { data: inventoryData } = useQuery({
    queryKey: ['inventory'],
    queryFn: async () => {
      const response = await apiClient.get('/inventory/items/');
      return response.data.results || response.data;
    },
  });

  // Mutation for adding card to collection
  const addToCollectionMutation = useMutation({
    mutationFn: async (cardId: number) => {
      const response = await apiClient.post('/inventory/items/', {
        card_id: cardId,
        quantity: 1,
        condition: 'NM',
        user_rating: 8.0,
        has_card: true
      });
      return response.data;
    },
    onSuccess: () => {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      queryClient.invalidateQueries({ queryKey: ['inventory'] });
    },
    onError: (error: any) => {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é:', error);
      // –ï—Å–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      if (error.response?.status === 500 && error.response?.data?.includes('UNIQUE constraint')) {
        queryClient.invalidateQueries({ queryKey: ['inventory'] });
      }
    }
  });

  if (isLoading) {
    return (
      <div className="catalog-grid">
        <div className="loading">
          <div style={{ fontSize: '2rem', marginBottom: '1rem' }}>üï∏Ô∏è</div>
          <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="catalog-grid">
        <div className="error">
          <div style={{ fontSize: '2rem', marginBottom: '1rem' }}>‚ö†Ô∏è</div>
          <p>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {error.message}</p>
        </div>
      </div>
    );
  }

  // Filter cards based on search and filters
  const filteredCards = cardsData?.filter((card: any) => {
    const matchesSearch = card.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         card.number.toString().includes(searchTerm);
    const matchesRarity = selectedRarity === 'all' || card.rarity === selectedRarity;
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–µ—Ä–∏—è–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
    let matchesSeries = true;
    if (selectedSeries !== 'all') {
      const cardNumber = card.number;
      if (selectedSeries === '1') {
        matchesSeries = cardNumber >= 1 && cardNumber <= 275;
      } else if (selectedSeries === '2') {
        matchesSeries = cardNumber >= 276 && cardNumber <= 550;
      } else if (selectedSeries === '3') {
        matchesSeries = cardNumber >= 551 && cardNumber <= 825;
      }
    }
    
    return matchesSearch && matchesRarity && matchesSeries;
  }) || [];

  // Get series options for filter
  const seriesOptions = [
    { value: '1', label: '–ß–∞—Å—Ç—å 1 (1-275)' },
    { value: '2', label: '–ß–∞—Å—Ç—å 2 (276-550)' },
    { value: '3', label: '–ß–∞—Å—Ç—å 3 (551-825)' }
  ];

  // Get rarity display info
  const getRarityInfo = (rarity: string) => {
    switch (rarity) {
      case 'o': return { name: 'Common', emoji: 'üü¢', color: '#16a34a' };
      case '—Å–∫': return { name: 'Uncommon', emoji: 'üü°', color: '#eab308' };
      case '—É–∫': return { name: 'Rare', emoji: 'üî¥', color: '#dc2626' };
      default: return { name: 'Unknown', emoji: '‚ö™', color: '#6b7280' };
    }
  };

  // Check if card is owned
  const isCardOwned = (cardId: number) => {
    return inventoryData?.some((item: any) => item.card.id === cardId && item.has_card) || false;
  };

  // Handle add to collection
  const handleAddToCollection = (cardId: number) => {
    addToCollectionMutation.mutate(cardId);
  };

  return (
    <div className="catalog-grid">
      {/* Header */}
      <div className="catalog-header">
        <div className="header-left">
          <div className="logo-section">
            <div className="spider-logo">üï∑Ô∏è</div>
            <h1 className="catalog-title">–ö–∞—Ç–∞–ª–æ–≥ –∫–∞—Ä—Ç–æ—á–µ–∫ –ß–µ–ª–æ–≤–µ–∫-–ü–∞—É–∫</h1>
          </div>
        </div>
        <div className="header-stats">
          <div className="stat-item">
            <span className="stat-number">{cardsData?.length || 0}</span>
            <span className="stat-label">–í—Å–µ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫</span>
          </div>
          <div className="stat-item">
            <span className="stat-number">{inventoryData?.filter((item: any) => item.has_card).length || 0}</span>
            <span className="stat-label">–í –∫–æ–ª–ª–µ–∫—Ü–∏–∏</span>
          </div>
        </div>
      </div>

      {/* Filters */}
      <div className="filters-section">
        <div className="search-container">
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="search-input"
          />
          <div className="search-icon">üîç</div>
        </div>

        <div className="filter-buttons">
          <select
            value={selectedRarity}
            onChange={(e) => setSelectedRarity(e.target.value)}
            className="filter-select"
          >
            <option value="all">–í—Å–µ —Ä–µ–¥–∫–æ—Å—Ç–∏</option>
            <option value="o">üü¢ –û–±—ã—á–Ω–∞—è</option>
            <option value="—Å–∫">üü° –ù–µ–æ–±—ã—á–Ω–∞—è</option>
            <option value="—É–∫">üî¥ –†–µ–¥–∫–∞—è</option>
          </select>

          <select
            value={selectedSeries}
            onChange={(e) => setSelectedSeries(e.target.value)}
            className="filter-select"
          >
            <option value="all">–í—Å–µ —Å–µ—Ä–∏–∏</option>
            {seriesOptions.map((option) => (
              <option key={option.value} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* Results count */}
      <div className="results-info">
        <p>–ü–æ–∫–∞–∑–∞–Ω–æ {filteredCards.length} –∏–∑ {cardsData?.length || 0} –∫–∞—Ä—Ç–æ—á–µ–∫</p>
      </div>

      {/* Cards Grid */}
      <div className="cards-grid">
        {filteredCards.map((card: any) => {
          const rarityInfo = getRarityInfo(card.rarity);
          const owned = isCardOwned(card.id);

          return (
            <div key={card.id} className={`card-item ${owned ? 'owned' : 'missing'}`}>
              <div className="card-header">
                <div className="card-number">#{card.number}</div>
                <div className="card-rarity" style={{ color: rarityInfo.color }}>
                  {rarityInfo.emoji} {rarityInfo.name}
                </div>
              </div>

              <div className="card-image">
                <img 
                  src={getCardImageFromData(card)} 
                  alt={card.title}
                  className="card-image-img"
                  onError={(e) => {
                    // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                    e.currentTarget.style.display = 'none';
                    const nextElement = e.currentTarget.nextElementSibling as HTMLElement;
                    if (nextElement) {
                      nextElement.style.display = 'flex';
                    }
                  }}
                />
                <div className="card-placeholder" style={{ display: 'none' }}>
                  üï∑Ô∏è
                </div>
                {owned && <div className="owned-badge">‚úÖ</div>}
              </div>

              <div className="card-info">
                <h3 className="card-title">{card.title}</h3>
                <p className="card-series">
                  {card.number >= 1 && card.number <= 275 ? '–ß–∞—Å—Ç—å 1' :
                   card.number >= 276 && card.number <= 550 ? '–ß–∞—Å—Ç—å 2' :
                   card.number >= 551 && card.number <= 825 ? '–ß–∞—Å—Ç—å 3' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —á–∞—Å—Ç—å'}
                </p>
                <div className="card-price">‚ÇΩ{parseFloat(card.base_price_rub).toFixed(2)}</div>
              </div>

              <div className="card-actions">
                <button 
                  className={`action-btn ${owned ? 'owned' : 'add'}`}
                  onClick={() => !owned && handleAddToCollection(card.id)}
                  disabled={owned || addToCollectionMutation.isPending}
                >
                  {addToCollectionMutation.isPending ? '‚è≥ –î–æ–±–∞–≤–ª—è–µ–º...' :
                   owned ? '‚úÖ –í –∫–æ–ª–ª–µ–∫—Ü–∏–∏' : '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é'}
                </button>
              </div>
            </div>
          );
        })}
      </div>

      {filteredCards.length === 0 && (
        <div className="no-results">
          <div style={{ fontSize: '3rem', marginBottom: '1rem' }}>üîç</div>
          <h3>–ö–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã</p>
        </div>
      )}
    </div>
  );
};

export default CatalogGrid;