import React, { useEffect, useState } from 'react';
import './TelegramAuth.css';

interface TelegramUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  photo_url?: string;
  auth_date: number;
  hash: string;
}

interface TelegramAuthProps {
  onAuth: (user: TelegramUser) => void;
  botName: string;
}

declare global {
  interface Window {
    onTelegramAuth: (user: TelegramUser) => void;
  }
}

const TelegramAuth: React.FC<TelegramAuthProps> = ({ onAuth, botName }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [debugInfo, setDebugInfo] = useState<string>('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');

  useEffect(() => {
    console.log('üîµ TelegramAuth: Component mounted');
    console.log('üîµ Bot name:', botName);
    
    // Set up global callback for Telegram
    window.onTelegramAuth = (user: TelegramUser) => {
      console.log('üü¢ Telegram auth callback called', user);
      setIsLoading(true);
      setError(null);
      onAuth(user);
    };

    // Load Telegram script with retry logic
    const loadScript = (attempt = 1) => {
      const script = document.createElement('script');
      // Try different CDN if first attempt fails
      script.src = attempt === 1 
        ? 'https://telegram.org/js/telegram-widget.js?22'
        : `https://telegram.org/js/telegram-widget.js?${Date.now()}`;
      
      script.setAttribute('data-telegram-login', botName);
      script.setAttribute('data-size', 'large');
      script.setAttribute('data-onauth', 'onTelegramAuth(user)');
      script.setAttribute('data-request-access', 'write');
      script.setAttribute('data-userpic', 'false');
      script.async = true;
      script.crossOrigin = 'anonymous';

      script.onload = () => {
        console.log('‚úÖ Telegram script loaded (attempt', attempt, ')');
        setDebugInfo('–°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
        
        // Check if iframe was created
        setTimeout(() => {
          const iframe = document.querySelector('iframe[id^="telegram-login"]');
          console.log('üîç Checking for iframe:', iframe);
          if (iframe) {
            console.log('‚úÖ Iframe found');
            console.log('Iframe src:', iframe.getAttribute('src'));
            setDebugInfo('–í–∏–¥–∂–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω ‚úÖ');
          } else {
            console.log('‚ùå Iframe not found');
            setDebugInfo('–í–∏–¥–∂–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ–º–µ–Ω–æ–º –≤ BotFather)');
          }
        }, 1500);
      };

      script.onerror = (e) => {
        console.error('‚ùå Failed to load Telegram script (attempt', attempt, ')', e);
        console.error('Script URL:', script.src);
        
        if (attempt < 2) {
          console.log('üîÑ Retrying with different URL...');
          setDebugInfo(`–ü–æ–≤—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏... (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1})`);
          setTimeout(() => loadScript(attempt + 1), 2000);
        } else {
          setDebugInfo('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∫—Ä–∏–ø—Ç Telegram');
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Telegram –≤–∏–¥–∂–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ telegram.org –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é.');
        }
      };
      
      return script;
    };

    const script = loadScript();

    const container = document.getElementById('telegram-login-container');
    console.log('üîç Container found:', !!container);
    
    if (container) {
      container.innerHTML = ''; // Clear previous content
      container.appendChild(script);
      console.log('‚úÖ Script appended to container');
      setDebugInfo('–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–∂–µ—Ç–∞...');
    } else {
      console.error('‚ùå Container not found!');
      setDebugInfo('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    return () => {
      // Cleanup
      console.log('üî¥ TelegramAuth: Cleanup');
      if (container) {
        container.innerHTML = '';
      }
      (window as any).onTelegramAuth = undefined;
    };
  }, [botName, onAuth]);

  return (
    <div className="telegram-auth">
      <div className="auth-header">
        <h2>–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram</h2>
        <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</p>
      </div>
      
      <div className="auth-content">
        <div id="telegram-login-container" className="telegram-widget-container"></div>
        
        {/* Debug info */}
        <div style={{ 
          marginTop: '1rem', 
          padding: '0.5rem', 
          background: 'rgba(59, 130, 246, 0.1)', 
          border: '1px solid rgba(59, 130, 246, 0.3)',
          borderRadius: '8px',
          fontSize: '0.85rem',
          color: '#60a5fa'
        }}>
          üîß Debug: {debugInfo}
        </div>
        
        {isLoading && (
          <div className="loading-indicator">
            <div className="spinner"></div>
            <p>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...</p>
          </div>
        )}
        
        {error && (
          <div className="error-message">
            <p>‚ùå {error}</p>
            <div style={{ 
              marginTop: '0.75rem', 
              padding: '0.75rem',
              background: 'rgba(234, 179, 8, 0.1)',
              border: '1px solid rgba(234, 179, 8, 0.3)',
              borderRadius: '6px',
              fontSize: '0.85rem',
              color: '#fbbf24'
            }}>
              <strong>üí° –†–µ—à–µ–Ω–∏–µ:</strong> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏" –Ω–∏–∂–µ. 
              –û–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ telegram.org
            </div>
          </div>
        )}
      </div>
      
      <div className="auth-footer">
        <p className="privacy-note">
          üîí –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤–∞—à–µ–≥–æ Telegram –ø—Ä–æ—Ñ–∏–ª—è
        </p>
        <p style={{ fontSize: '0.75rem', color: '#6b7280', marginTop: '0.5rem' }}>
          Bot: @{botName}
        </p>
      </div>
    </div>
  );
};

export default TelegramAuth;
