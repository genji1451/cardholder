import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import TelegramAuth from '../components/TelegramAuth';
import TelegramAuthDev from '../components/TelegramAuthDev';
import apiClient from '../api/client';
import './AuthPage.css';

const AuthPage: React.FC = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [useDevMode, setUseDevMode] = useState(false);
  const { login } = useAuth();
  const navigate = useNavigate();

  const handleTelegramAuth = async (telegramUser: any) => {
    setIsLoading(true);
    setError(null);

    try {
      const response = await apiClient.post('/auth/telegram/', telegramUser);
      const { access, refresh } = response.data;
      
      // Save tokens and load user data
      await login(access, refresh);
      
      // Redirect to dashboard
      navigate('/dashboard');
    } catch (error: any) {
      console.error('Telegram auth error:', error);
      setError(error.response?.data?.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="auth-page">
      <div className="auth-container">
        <div className="auth-logo">
          <h1>üï∑Ô∏è Collection Portfolio</h1>
          <p>–£–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–∏–º–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏ –∫–∞—Ä—Ç–æ—á–µ–∫</p>
        </div>

        <div className="auth-content">
          {!useDevMode ? (
            <TelegramAuth 
              onAuth={handleTelegramAuth}
              botName="cardloginbot" // –ò–º—è –±–æ—Ç–∞ –∏–∑ Telegram
            />
          ) : (
            <TelegramAuthDev onAuth={handleTelegramAuth} />
          )}
          
          <div className="auth-mode-toggle">
            <button 
              onClick={() => setUseDevMode(!useDevMode)}
              className="toggle-button"
            >
              {useDevMode ? 'üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ Telegram' : 'üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'}
            </button>
          </div>
          
          {isLoading && (
            <div className="auth-loading">
              <div className="loading-spinner"></div>
              <p>–í—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É...</p>
            </div>
          )}
          
          {error && (
            <div className="auth-error">
              <p>‚ùå {error}</p>
              <button 
                onClick={() => setError(null)}
                className="retry-button"
              >
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
            </div>
          )}
        </div>

        <div className="auth-features">
          <h3>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</h3>
          <ul>
            <li>üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏</li>
            <li>üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ</li>
            <li>üíù –°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π</li>
            <li>üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π</li>
            <li>üõçÔ∏è –î–æ—Å—Ç—É–ø –∫ –º–∞–≥–∞–∑–∏–Ω—É</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default AuthPage;
