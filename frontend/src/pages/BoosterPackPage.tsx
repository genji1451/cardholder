import { useState, useRef, useEffect } from 'react';
import './BoosterPackPage.css';

interface BoosterPackPageProps {}

interface Card {
  id: number;
  image: string;
  title: string;
  rarity: 'common' | 'uncommon' | 'rare';
}

const BoosterPackPage = ({}: BoosterPackPageProps) => {
  const [isOpening, setIsOpening] = useState(false);
  const [isOpened, setIsOpened] = useState(false);
  const [isCutting, setIsCutting] = useState(false);
  const [topFlipped, setTopFlipped] = useState(false);
  const [cardStack, setCardStack] = useState<Card[]>([]);
  const [currentCardIndex, setCurrentCardIndex] = useState(0);
  const [showCard, setShowCard] = useState(false);
  const [rotation, setRotation] = useState({ x: 0, y: 0 });
  
  const packRef = useRef<HTMLDivElement>(null);
  const cardRef = useRef<HTMLDivElement>(null);
  const topPartRef = useRef<HTMLDivElement>(null);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–∞—Ä—Ç—ã
  const generateCards = (): Card[] => {
    const cards: Card[] = [];
    const cardCount = 8;
    
    for (let i = 0; i < cardCount; i++) {
      // –°–ª—É—á–∞–π–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å
      const rarities: ('common' | 'uncommon' | 'rare')[] = ['common', 'uncommon', 'rare'];
      const rarity = rarities[Math.floor(Math.random() * rarities.length)];
      
      // –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const imageNum = Math.floor(Math.random() * 276) + 1;
      const image = `/images/spiderman/${imageNum.toString().padStart(3, '0')}.png`;
      
      cards.push({
        id: i,
        image,
        title: `Card #${imageNum}`,
        rarity
      });
    }
    
    return cards;
  };

  const handleOpenPack = () => {
    if (isOpening || isOpened) return;
    
    setIsOpening(true);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã
    const cards = generateCards();
    setCardStack(cards);
    
    // –≠—Ç–∞–ø 1: –†–∞–∑—Ä–µ–∑ (0.5 —Å–µ–∫)
    setTimeout(() => {
      setIsCutting(true);
    }, 300);
    
    // –≠—Ç–∞–ø 2: –ü–æ–≤–æ—Ä–æ—Ç –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ (0.8 —Å–µ–∫)
    setTimeout(() => {
      setTopFlipped(true);
    }, 800);
    
    // –≠—Ç–∞–ø 3: –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –∏ –ø–æ–∫–∞–∑ –∫–∞—Ä—Ç (1.6 —Å–µ–∫)
    setTimeout(() => {
      setIsOpening(false);
      setIsCutting(false);
      setTopFlipped(false);
      setIsOpened(true);
      setShowCard(true);
    }, 1600);
  };

  const handleSwipe = (direction: 'left' | 'right') => {
    if (!isOpened || currentCardIndex >= cardStack.length - 1) return;
    
    setShowCard(false);
    
    setTimeout(() => {
      setCurrentCardIndex(currentCardIndex + 1);
      setShowCard(true);
    }, 300);
  };

  const handleReset = () => {
    setIsOpening(false);
    setIsOpened(false);
    setIsCutting(false);
    setTopFlipped(false);
    setCardStack([]);
    setCurrentCardIndex(0);
    setShowCard(false);
    setRotation({ x: 0, y: 0 });
  };

  const handleCardMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {
    if (!cardRef.current || !showCard) return;

    const rect = cardRef.current.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    const centerX = rect.width / 2;
    const centerY = rect.height / 2;

    const rotateX = ((y - centerY) / centerY) * 20; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–∫–ª–æ–Ω 20 –≥—Ä–∞–¥—É—Å–æ–≤
    const rotateY = ((centerX - x) / centerX) * 20;

    setRotation({ x: rotateX, y: rotateY });
  };

  const handleCardMouseLeave = () => {
    setRotation({ x: 0, y: 0 });
  };

  const currentCard = cardStack[currentCardIndex];

  return (
    <div className="booster-pack-container">
      <div className="booster-pack-header">
        <h1>üé¥ Booster Pack Opener</h1>
        <p>–û—Ç–∫—Ä–æ–π—Ç–µ –ø–∞–∫ –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –∫–∞—Ä—Ç—ã –≤—ã –ø–æ–ª—É—á–∏–ª–∏!</p>
      </div>

      {!isOpened ? (
        <div className="pack-section">
          <div 
            ref={packRef}
            className={`booster-pack ${isOpening ? 'opening' : ''} ${isCutting ? 'cutting' : ''} ${topFlipped ? 'top-flipped' : ''}`}
            onClick={handleOpenPack}
          >
            <div className="pack-wrap">
              <div className="pack-logo-section">
                <div className="pack-logo">üï∏Ô∏è</div>
                <div className="pack-age-rating">6+</div>
              </div>
              <div className="pack-brand-banner">TRADING CARD GAME</div>
              
              <div className="pack-image-section">
                <div className="pack-hero">üï∑Ô∏è</div>
                <div className="pack-background-elements">
                  <div className="cloud cloud-1"></div>
                  <div className="cloud cloud-2"></div>
                  <div className="cloud cloud-3"></div>
                </div>
              </div>
              
              <div className="pack-set-section">
                <div className="pack-set-name">SPIDER-MAN</div>
                <div className="pack-set-subname">WEB OF HEROES</div>
              </div>
              
              <div className="pack-content-info">
                <div className="pack-cards-count">10 ADDITIONAL GAME CARDS</div>
              </div>
            </div>
            
            {isCutting && (
              <div className="cutting-line"></div>
            )}
            
            {topFlipped && (
              <div 
                ref={topPartRef}
                className="pack-top-part-flipped"
              >
                <div className="top-part-content">
                  <div className="pack-logo-section">
                    <div className="pack-logo">üï∏Ô∏è</div>
                    <div className="pack-age-rating">6+</div>
                  </div>
                  <div className="pack-brand-banner">TRADING CARD GAME</div>
                </div>
              </div>
            )}
            
            {isOpening && !topFlipped && (
              <div className="pack-top-part-static">
                <div className="top-part-content">
                  <div className="pack-logo-section">
                    <div className="pack-logo">üï∏Ô∏è</div>
                    <div className="pack-age-rating">6+</div>
                  </div>
                  <div className="pack-brand-banner">TRADING CARD GAME</div>
                </div>
              </div>
            )}
          </div>
          
          {!isOpening && (
            <button className="open-button" onClick={handleOpenPack}>
              ‚úÇÔ∏è –û—Ç–∫—Ä—ã—Ç—å –ø–∞–∫
            </button>
          )}
        </div>
      ) : (
        <div className="cards-section">
          {showCard && currentCard && (
            <div className="card-3d-wrapper">
              <div 
                ref={cardRef}
                className={`card-container ${showCard ? 'show' : ''}`}
                onMouseMove={handleCardMouseMove}
                onMouseLeave={handleCardMouseLeave}
                onClick={() => handleSwipe('left')}
                style={{
                  transform: `perspective(1500px) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg) scale3d(1, 1, 1)`,
                }}
              >
                <div className="card-flip">
                  <div className="card-front-face">
                    <img src={currentCard.image} alt={currentCard.title} />
                  </div>
                </div>
              </div>
              
              <div className="card-shadow"></div>
              
              <div className="card-info">
                <div className={`rarity-badge ${currentCard.rarity}`}>
                  {currentCard.rarity === 'common' ? 'üü¢ –û–±—ã—á–Ω–∞—è' : 
                   currentCard.rarity === 'uncommon' ? 'üü° –ù–µ–æ–±—ã—á–Ω–∞—è' : 
                   'üî¥ –†–µ–¥–∫–∞—è'}
                </div>
                <h3>{currentCard.title}</h3>
                <div className="card-counter">
                  –ö–∞—Ä—Ç–∞ {currentCardIndex + 1} –∏–∑ {cardStack.length}
                </div>
              </div>
            </div>
          )}
          
          {!showCard && currentCard && (
            <div className="card-3d-wrapper">
              <div className="card-container">
                <div className="card-flip">
                  <div className="card-front-face">
                    <img src={currentCard.image} alt={currentCard.title} />
                  </div>
                </div>
              </div>
              <div className="card-shadow"></div>
            </div>
          )}
          
          <div className="cards-controls">
            {currentCardIndex < cardStack.length - 1 ? (
              <button className="next-button" onClick={() => handleSwipe('left')}>
                üëà –°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞
              </button>
            ) : (
              <div className="pack-complete">
                <h2>üéâ –ü–∞–∫ –æ—Ç–∫—Ä—ã—Ç!</h2>
                <p>–í—ã –ø–æ–ª—É—á–∏–ª–∏ {cardStack.length} –∫–∞—Ä—Ç</p>
                <button className="reset-button" onClick={handleReset}>
                  üîÑ –û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–π –ø–∞–∫
                </button>
              </div>
            )}
          </div>
        </div>
      )}

      <div className="booster-pack-instructions">
        <h3>üéÆ –ö–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å:</h3>
        <ul>
          <li>‚úÇÔ∏è –ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å –ø–∞–∫" - —É–ø–∞–∫–æ–≤–∫–∞ —Ä–∞–∑—Ä–µ–∂–µ—Ç—Å—è —Å–≤–µ—Ä—Ö—É</li>
          <li>üé¥ –ü–æ—è–≤—è—Ç—Å—è –∫–∞—Ä—Ç—ã –≤ —Å—Ç–æ–ø–∫–µ</li>
          <li>üëÜ –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ "–°–ª–µ–¥—É—é—â–∞—è –∫–∞—Ä—Ç–∞" –¥–ª—è –ª–∏—Å—Ç–∞–Ω–∏—è</li>
          <li>‚≠ê –û—Ç–∫—Ä–æ–π—Ç–µ –≤—Å–µ 8 –∫–∞—Ä—Ç –∏–∑ –ø–∞–∫–∞!</li>
        </ul>
      </div>
    </div>
  );
};

export default BoosterPackPage;

