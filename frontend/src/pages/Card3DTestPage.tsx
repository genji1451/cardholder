import { useState, useRef, useEffect } from 'react';
import './Card3DTestPage.css';

interface Card3DTestPageProps {}

const Card3DTestPage = ({}: Card3DTestPageProps) => {
  const [isFlipped, setIsFlipped] = useState(false);
  const [rotation, setRotation] = useState({ x: 0, y: 0 });
  const cardRef = useRef<HTMLDivElement>(null);

  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {
    if (!cardRef.current) return;

    const rect = cardRef.current.getBoundingClientRect();
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;

    const centerX = rect.width / 2;
    const centerY = rect.height / 2;

    const rotateX = ((y - centerY) / centerY) * 15; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–∫–ª–æ–Ω 15 –≥—Ä–∞–¥—É—Å–æ–≤
    const rotateY = ((centerX - x) / centerX) * 15;

    setRotation({ x: rotateX, y: rotateY });
  };

  const handleMouseLeave = () => {
    setRotation({ x: 0, y: 0 });
  };

  const handleCardClick = () => {
    setIsFlipped(!isFlipped);
  };

  return (
    <div className="card3d-test-container">
      <div className="card3d-test-header">
        <h1>üé¥ 3D –ö–∞—Ä—Ç–æ—á–∫–∞ - –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º</h1>
        <p>–ù–∞–≤–µ–¥–∏—Ç–µ –º—ã—à—å –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å 3D —ç—Ñ—Ñ–µ–∫—Ç</p>
        <p>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å</p>
      </div>

      <div className="card3d-test-wrapper">
        <div
          ref={cardRef}
          className={`card3d-test-card ${isFlipped ? 'flipped' : ''}`}
          onMouseMove={handleMouseMove}
          onMouseLeave={handleMouseLeave}
          onClick={handleCardClick}
          style={{
            transform: `perspective(1000px) rotateX(${rotation.x}deg) rotateY(${isFlipped ? rotation.y + 180 : rotation.y}deg)`,
          }}
        >
          <div className="card3d-test-face card3d-test-front">
            <img 
              src="/images/spiderman/001.png" 
              alt="Card Front"
              className="card3d-test-full-image"
            />
          </div>

          <div className="card3d-test-face card3d-test-back">
            <img 
              src="/images/spiderman/back-card.png" 
              alt="Card Back"
              className="card3d-test-full-image"
              onError={(e) => {
                // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder
                e.currentTarget.src = 'data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" width="400" height="600"%3E%3Crect fill="%23667eea" width="400" height="600"/%3E%3Ctext x="50%25" y="50%25" font-size="60" fill="white" text-anchor="middle" dominant-baseline="middle"%3Eüï∏Ô∏è%3C/text%3E%3C/svg%3E';
              }}
            />
          </div>
        </div>
      </div>

      <div className="card3d-test-instructions">
        <h3>üéÆ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</h3>
        <ul>
          <li>‚ú® –ù–∞–≤–µ–¥–∏—Ç–µ –º—ã—à—å –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É - –æ–Ω–∞ –±—É–¥–µ—Ç –Ω–∞–∫–ª–æ–Ω—è—Ç—å—Å—è –≤ 3D</li>
          <li>üîÑ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É - –æ–Ω–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π</li>
          <li>üé® –ö–ª–∏–∫–Ω–∏—Ç–µ –µ—â–µ —Ä–∞–∑ - –∫–∞—Ä—Ç–æ—á–∫–∞ –≤–µ—Ä–Ω–µ—Ç—Å—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ</li>
          <li>‚ö° 3D —ç—Ñ—Ñ–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö –∫–∞—Ä—Ç–æ—á–∫–∏!</li>
        </ul>
      </div>

      <div className="card3d-test-controls">
        <button onClick={() => setIsFlipped(!isFlipped)} className="test-button">
          {isFlipped ? 'üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏—Ü–µ–≤—É—é —Å—Ç–æ—Ä–æ–Ω—É' : 'üîÑ –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É'}
        </button>
        <button onClick={() => setRotation({ x: 0, y: 0 })} className="test-button">
          üéØ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞–∫–ª–æ–Ω
        </button>
      </div>
    </div>
  );
};

export default Card3DTestPage;

