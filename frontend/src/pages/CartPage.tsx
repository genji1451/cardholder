import { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useCart } from '../contexts/CartContext';
import Footer from '../components/Footer';
import CheckoutForm from '../components/CheckoutForm';
import './CartPage.css';

interface DeliveryForm {
  fullName: string;
  phone: string;
  email: string;
  address: string;
  city: string;
  postalCode: string;
  country: string;
  comment: string;
}

const CartPage = () => {
  const { cart, removeFromCart, updateQuantity, getTotalPrice, clearCart } = useCart();
  const navigate = useNavigate();
  const [step, setStep] = useState<'cart' | 'delivery' | 'payment'>('cart');
  const [showCheckout, setShowCheckout] = useState(false);
  const [deliveryForm, setDeliveryForm] = useState<DeliveryForm>({
    fullName: '',
    phone: '',
    email: '',
    address: '',
    city: '',
    postalCode: '',
    country: '–†–æ—Å—Å–∏—è',
    comment: '',
  });
  const [paymentMethod, setPaymentMethod] = useState<'card' | 'sbp' | 'ozon'>('card');
  const [isProcessing, setIsProcessing] = useState(false);

  const deliveryPrice = 500; // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
  const totalPrice = getTotalPrice();
  const finalPrice = totalPrice + deliveryPrice;

  const handleQuantityChange = (productId: number, change: number) => {
    const item = cart.find(item => item.id === productId);
    if (item) {
      updateQuantity(productId, item.quantity + change);
    }
  };

  const handleFormChange = (field: keyof DeliveryForm, value: string) => {
    setDeliveryForm(prev => ({ ...prev, [field]: value }));
  };

  const isDeliveryFormValid = () => {
    return (
      deliveryForm.fullName.trim() !== '' &&
      deliveryForm.phone.trim() !== '' &&
      deliveryForm.email.trim() !== '' &&
      deliveryForm.address.trim() !== '' &&
      deliveryForm.city.trim() !== ''
    );
  };

  const handleProceedToPayment = () => {
    if (!isDeliveryFormValid()) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }
    setStep('payment');
    window.scrollTo(0, 0);
  };

  const handlePayment = async () => {
    setIsProcessing(true);
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    // –ù–∞–ø—Ä–∏–º–µ—Ä: Stripe, YooKassa, Tinkoff
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
    setTimeout(() => {
      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
      const orderData = {
        items: cart,
        delivery: deliveryForm,
        paymentMethod,
        totalPrice: finalPrice,
        orderDate: new Date().toISOString(),
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –∏–ª–∏ –Ω–∞ email
      const message = `
üõçÔ∏è –ù–û–í–´–ô –ó–ê–ö–ê–ó

üì¶ –¢–æ–≤–∞—Ä—ã:
${cart.map(item => `- ${item.title} x${item.quantity} = ‚ÇΩ${(item.price * item.quantity).toLocaleString()}`).join('\n')}

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤: ‚ÇΩ${totalPrice.toLocaleString()}
üöö –î–æ—Å—Ç–∞–≤–∫–∞: ‚ÇΩ${deliveryPrice.toLocaleString()}
üí≥ –ò–¢–û–ì–û: ‚ÇΩ${finalPrice.toLocaleString()}

üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å:
–ò–º—è: ${deliveryForm.fullName}
–¢–µ–ª–µ—Ñ–æ–Ω: ${deliveryForm.phone}
Email: ${deliveryForm.email}

üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:
–°—Ç—Ä–∞–Ω–∞: ${deliveryForm.country}
–ì–æ—Ä–æ–¥: ${deliveryForm.city}
–ê–¥—Ä–µ—Å: ${deliveryForm.address}
–ò–Ω–¥–µ–∫—Å: ${deliveryForm.postalCode}

üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${deliveryForm.comment || '–ù–µ—Ç'}

üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${paymentMethod === 'card' ? '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞' : paymentMethod === 'sbp' ? '–°–ë–ü' : 'OZON Pay'}
      `.trim();

      console.log('Order:', orderData);
      console.log('Telegram message:', message);

      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:
      // 1. –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥
      // 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API
      // 3. –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã

      alert(`–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ email: ${deliveryForm.email}`);
      
      clearCart();
      navigate('/shop');
      setIsProcessing(false);
    }, 2000);
  };

  if (cart.length === 0 && step === 'cart') {
    return (
      <div className="cart-page">
        <nav className="shop-nav">
          <Link to="/" className="shop-nav-logo">
            üï∑Ô∏è Portfolio Cards
          </Link>
          <div className="shop-nav-links">
            <Link to="/shop" className="shop-nav-link">üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω</Link>
            <Link to="/" className="shop-nav-link">üè† –ì–ª–∞–≤–Ω–∞—è</Link>
          </div>
        </nav>

        <div className="empty-cart">
          <div className="empty-cart-icon">üõí</div>
          <h2>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h2>
          <p>–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞</p>
          <Link to="/shop" className="btn-primary">
            üõçÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω
          </Link>
        </div>
      </div>
    );
  }

  return (
    <div className="cart-page">
      <nav className="shop-nav">
        <Link to="/" className="shop-nav-logo">
          üï∑Ô∏è Portfolio Cards
        </Link>
        <div className="shop-nav-links">
          <Link to="/shop" className="shop-nav-link">üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω</Link>
          <Link to="/" className="shop-nav-link">üè† –ì–ª–∞–≤–Ω–∞—è</Link>
        </div>
      </nav>

      <div className="cart-container">
        {/* Progress Steps */}
        <div className="checkout-steps">
          <div className={`step ${step === 'cart' ? 'active' : 'completed'}`}>
            <div className="step-number">1</div>
            <div className="step-label">–ö–æ—Ä–∑–∏–Ω–∞</div>
          </div>
          <div className={`step ${step === 'delivery' ? 'active' : step === 'payment' ? 'completed' : ''}`}>
            <div className="step-number">2</div>
            <div className="step-label">–î–æ—Å—Ç–∞–≤–∫–∞</div>
          </div>
          <div className={`step ${step === 'payment' ? 'active' : ''}`}>
            <div className="step-number">3</div>
            <div className="step-label">–û–ø–ª–∞—Ç–∞</div>
          </div>
        </div>

        {/* Cart Step */}
        {step === 'cart' && (
          <div className="cart-content">
            <div className="cart-items">
              <h2>–ö–æ—Ä–∑–∏–Ω–∞ ({cart.length})</h2>
              {cart.map(item => (
                <div key={item.id} className="cart-item">
                  <img src={item.image} alt={item.title} className="cart-item-image" />
                  <div className="cart-item-info">
                    <h3>{item.title}</h3>
                    <p className="cart-item-category">
                      {item.category === 'original' ? '‚≠ê –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è' : 
                       item.category === 'meme' ? 'üòÑ –ú–µ–º–Ω–∞—è —Å–µ—Ä–∏—è' :
                       item.category === 'art' ? 'üé® –ö–∞—Ä—Ç–∏–Ω–∞' : '‚ú® –î–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞'}
                    </p>
                    {item.isLimited && item.limitedInfo && (
                      <span className="limited-tag">
                        ‚≠ê {item.limitedInfo}
                      </span>
                    )}
                    {item.options && (
                      <div className="cart-item-options">
                        {item.options.hasCase && (
                          <span className="option-badge">üì¶ –í –∫–µ–π—Å–µ</span>
                        )}
                        {item.options.filmType && item.options.filmType !== 'none' && (
                          <span className="option-badge">
                            {item.options.filmType === 'holographic' ? '‚ú® –ì–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è' : '‚öôÔ∏è –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è'}
                          </span>
                        )}
                      </div>
                    )}
                  </div>
                  <div className="cart-item-quantity">
                    <button 
                      onClick={() => handleQuantityChange(item.id, -1)}
                      className="qty-btn"
                    >
                      ‚àí
                    </button>
                    <span>{item.quantity}</span>
                    <button 
                      onClick={() => handleQuantityChange(item.id, 1)}
                      className="qty-btn"
                    >
                      +
                    </button>
                  </div>
                  <div className="cart-item-price">
                    ‚ÇΩ{(item.price * item.quantity).toLocaleString()}
                  </div>
                  <button 
                    onClick={() => removeFromCart(item.id)}
                    className="cart-item-remove"
                  >
                    ‚ùå
                  </button>
                </div>
              ))}
            </div>

            <div className="cart-summary">
              <h3>–ò—Ç–æ–≥–æ</h3>
              <div className="summary-row">
                <span>–¢–æ–≤–∞—Ä—ã:</span>
                <span>‚ÇΩ{totalPrice.toLocaleString()}</span>
              </div>
              <div className="summary-row">
                <span>–î–æ—Å—Ç–∞–≤–∫–∞:</span>
                <span>‚ÇΩ{deliveryPrice.toLocaleString()}</span>
              </div>
              <div className="summary-total">
                <span>–ò—Ç–æ–≥–æ:</span>
                <span>‚ÇΩ{finalPrice.toLocaleString()}</span>
              </div>
              <button onClick={() => setShowCheckout(true)} className="btn-checkout">
                üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Robokassa
              </button>
              <Link to="/shop" className="btn-continue-shopping">
                ‚Üê –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏
              </Link>
            </div>
          </div>
        )}

        {/* Delivery Step */}
        {step === 'delivery' && (
          <div className="delivery-form">
            <h2>üì¶ –î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏</h2>
            
            <div className="form-grid">
              <div className="form-group">
                <label>–§–ò–û *</label>
                <input
                  type="text"
                  value={deliveryForm.fullName}
                  onChange={(e) => handleFormChange('fullName', e.target.value)}
                  placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
                  required
                />
              </div>

              <div className="form-group">
                <label>–¢–µ–ª–µ—Ñ–æ–Ω *</label>
                <input
                  type="tel"
                  value={deliveryForm.phone}
                  onChange={(e) => handleFormChange('phone', e.target.value)}
                  placeholder="+7 (999) 123-45-67"
                  required
                />
              </div>

              <div className="form-group full-width">
                <label>Email *</label>
                <input
                  type="email"
                  value={deliveryForm.email}
                  onChange={(e) => handleFormChange('email', e.target.value)}
                  placeholder="example@mail.ru"
                  required
                />
              </div>

              <div className="form-group">
                <label>–°—Ç—Ä–∞–Ω–∞ *</label>
                <input
                  type="text"
                  value={deliveryForm.country}
                  onChange={(e) => handleFormChange('country', e.target.value)}
                  placeholder="–†–æ—Å—Å–∏—è"
                  required
                />
              </div>

              <div className="form-group">
                <label>–ì–æ—Ä–æ–¥ *</label>
                <input
                  type="text"
                  value={deliveryForm.city}
                  onChange={(e) => handleFormChange('city', e.target.value)}
                  placeholder="–ú–æ—Å–∫–≤–∞"
                  required
                />
              </div>

              <div className="form-group full-width">
                <label>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ *</label>
                <input
                  type="text"
                  value={deliveryForm.address}
                  onChange={(e) => handleFormChange('address', e.target.value)}
                  placeholder="—É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 10, –∫–≤. 25"
                  required
                />
              </div>

              <div className="form-group">
                <label>–ò–Ω–¥–µ–∫—Å</label>
                <input
                  type="text"
                  value={deliveryForm.postalCode}
                  onChange={(e) => handleFormChange('postalCode', e.target.value)}
                  placeholder="123456"
                />
              </div>

              <div className="form-group full-width">
                <label>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</label>
                <textarea
                  value={deliveryForm.comment}
                  onChange={(e) => handleFormChange('comment', e.target.value)}
                  placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è..."
                  rows={3}
                />
              </div>
            </div>

            <div className="form-actions">
              <button onClick={() => setStep('cart')} className="btn-back">
                ‚Üê –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ
              </button>
              <button onClick={handleProceedToPayment} className="btn-next">
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ –æ–ø–ª–∞—Ç–µ ‚Üí
              </button>
            </div>
          </div>
        )}

        {/* Payment Step */}
        {step === 'payment' && (
          <div className="payment-section">
            <h2>üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</h2>

            <div className="payment-methods">
              <div 
                className={`payment-method ${paymentMethod === 'card' ? 'selected' : ''}`}
                onClick={() => setPaymentMethod('card')}
              >
                <div className="payment-icon">üí≥</div>
                <div className="payment-info">
                  <h3>–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</h3>
                  <p>Visa, MasterCard, –ú–ò–†</p>
                </div>
                <div className="payment-radio">
                  {paymentMethod === 'card' && '‚úì'}
                </div>
              </div>

              <div 
                className={`payment-method ${paymentMethod === 'sbp' ? 'selected' : ''}`}
                onClick={() => setPaymentMethod('sbp')}
              >
                <div className="payment-icon">üì±</div>
                <div className="payment-info">
                  <h3>–°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –ë—ã—Å—Ç—Ä—ã—Ö –ü–ª–∞—Ç–µ–∂–µ–π)</h3>
                  <p>–û–ø–ª–∞—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</p>
                </div>
                <div className="payment-radio">
                  {paymentMethod === 'sbp' && '‚úì'}
                </div>
              </div>

              <div 
                className={`payment-method ${paymentMethod === 'ozon' ? 'selected' : ''}`}
                onClick={() => setPaymentMethod('ozon')}
              >
                <div className="payment-icon">üõí</div>
                <div className="payment-info">
                  <h3>OZON Pay</h3>
                  <p>–ë—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ OZON</p>
                </div>
                <div className="payment-radio">
                  {paymentMethod === 'ozon' && '‚úì'}
                </div>
              </div>
            </div>

            <div className="order-summary-final">
              <h3>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞</h3>
              <div className="summary-items">
                {cart.map(item => (
                  <div key={item.id} className="summary-item">
                    <span>{item.title} x{item.quantity}</span>
                    <span>‚ÇΩ{(item.price * item.quantity).toLocaleString()}</span>
                  </div>
                ))}
              </div>
              <div className="summary-row">
                <span>–î–æ—Å—Ç–∞–≤–∫–∞:</span>
                <span>‚ÇΩ{deliveryPrice.toLocaleString()}</span>
              </div>
              <div className="summary-total">
                <span>–ö –æ–ø–ª–∞—Ç–µ:</span>
                <span>‚ÇΩ{finalPrice.toLocaleString()}</span>
              </div>
            </div>

            <div className="form-actions">
              <button onClick={() => setStep('delivery')} className="btn-back">
                ‚Üê –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
              </button>
              <button 
                onClick={handlePayment} 
                className="btn-pay"
                disabled={isProcessing}
              >
                {isProcessing ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : `–û–ø–ª–∞—Ç–∏—Ç—å ‚ÇΩ${finalPrice.toLocaleString()}`}
              </button>
            </div>

            <div className="security-note">
              <div className="security-icon">üîí</div>
              <p>–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã.</p>
            </div>
          </div>
        )}
      </div>

      {showCheckout && (
        <CheckoutForm onClose={() => setShowCheckout(false)} />
      )}

      <Footer />
    </div>
  );
};

export default CartPage;

